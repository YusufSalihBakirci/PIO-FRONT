{"ast":null,"code":"import _toConsumableArray from \"C:/Users/USER/Desktop/PIO-FRONT/theme/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/USER/Desktop/PIO-FRONT/theme/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _typeof from \"C:/Users/USER/Desktop/PIO-FRONT/theme/node_modules/@babel/runtime/helpers/esm/typeof.js\";\nvar _errorMessages;\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-json.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/es.string.from-code-point.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*!\n  * message-compiler v9.14.1\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nvar LOCATION_STUB = {\n  start: {\n    line: 1,\n    column: 1,\n    offset: 0\n  },\n  end: {\n    line: 1,\n    column: 1,\n    offset: 0\n  }\n};\nfunction createPosition(line, column, offset) {\n  return {\n    line: line,\n    column: column,\n    offset: offset\n  };\n}\nfunction createLocation(start, end, source) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  if (source != null) {\n    loc.source = source;\n  }\n  return loc;\n}\n\n/**\n * Original Utilities\n * written by kazuya kawaguchi\n */\nvar RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\n/* eslint-disable */\nfunction format(message) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n  if (args.length === 1 && isObject(args[0])) {\n    args = args[0];\n  }\n  if (!args || !args.hasOwnProperty) {\n    args = {};\n  }\n  return message.replace(RE_ARGS, function (match, identifier) {\n    return args.hasOwnProperty(identifier) ? args[identifier] : '';\n  });\n}\nvar assign = Object.assign;\nvar isString = function isString(val) {\n  return typeof val === 'string';\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar isObject = function isObject(val) {\n  return val !== null && _typeof(val) === 'object';\n};\nfunction join(items) {\n  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return items.reduce(function (str, item, index) {\n    return index === 0 ? str + item : str + separator + item;\n  }, '');\n}\nvar CompileWarnCodes = {\n  USE_MODULO_SYNTAX: 1,\n  __EXTEND_POINT__: 2\n};\n/** @internal */\nvar warnMessages = _defineProperty({}, CompileWarnCodes.USE_MODULO_SYNTAX, \"Use modulo before '{{0}}'.\");\nfunction createCompileWarn(code, loc) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    args[_key2 - 2] = arguments[_key2];\n  }\n  var msg = format.apply(void 0, [warnMessages[code] || ''].concat(_toConsumableArray(args || [])));\n  var message = {\n    message: String(msg),\n    code: code\n  };\n  if (loc) {\n    message.location = loc;\n  }\n  return message;\n}\nvar CompileErrorCodes = {\n  // tokenizer error codes\n  EXPECTED_TOKEN: 1,\n  INVALID_TOKEN_IN_PLACEHOLDER: 2,\n  UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n  UNKNOWN_ESCAPE_SEQUENCE: 4,\n  INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n  UNBALANCED_CLOSING_BRACE: 6,\n  UNTERMINATED_CLOSING_BRACE: 7,\n  EMPTY_PLACEHOLDER: 8,\n  NOT_ALLOW_NEST_PLACEHOLDER: 9,\n  INVALID_LINKED_FORMAT: 10,\n  // parser error codes\n  MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n  UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n  UNEXPECTED_EMPTY_LINKED_KEY: 13,\n  UNEXPECTED_LEXICAL_ANALYSIS: 14,\n  // generator error codes\n  UNHANDLED_CODEGEN_NODE_TYPE: 15,\n  // minifier error codes\n  UNHANDLED_MINIFIER_NODE_TYPE: 16,\n  // Special value for higher-order compilers to pick up the last code\n  // to avoid collision of error codes. This should always be kept as the last\n  // item.\n  __EXTEND_POINT__: 17\n};\n/** @internal */\nvar errorMessages = (_errorMessages = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_errorMessages, CompileErrorCodes.EXPECTED_TOKEN, \"Expected token: '{0}'\"), CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, \"Invalid token in placeholder: '{0}'\"), CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, \"Unterminated single quote in placeholder\"), CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, \"Unknown escape sequence: \\\\{0}\"), CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, \"Invalid unicode escape sequence: {0}\"), CompileErrorCodes.UNBALANCED_CLOSING_BRACE, \"Unbalanced closing brace\"), CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, \"Unterminated closing brace\"), CompileErrorCodes.EMPTY_PLACEHOLDER, \"Empty placeholder\"), CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, \"Not allowed nest placeholder\"), CompileErrorCodes.INVALID_LINKED_FORMAT, \"Invalid linked format\"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_errorMessages, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, \"Plural must have messages\"), CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, \"Unexpected empty linked modifier\"), CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, \"Unexpected empty linked key\"), CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, \"Unexpected lexical analysis in token: '{0}'\"), CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE, \"unhandled codegen node type: '{0}'\"), CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE, \"unhandled mimifier node type: '{0}'\"));\nfunction createCompileError(code, loc) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var domain = options.domain,\n    messages = options.messages,\n    args = options.args;\n  var msg = format.apply(void 0, [(messages || errorMessages)[code] || ''].concat(_toConsumableArray(args || [])));\n  var error = new SyntaxError(String(msg));\n  error.code = code;\n  if (loc) {\n    error.location = loc;\n  }\n  error.domain = domain;\n  return error;\n}\n/** @internal */\nfunction defaultOnError(error) {\n  throw error;\n}\n\n// eslint-disable-next-line no-useless-escape\nvar RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nvar detectHtmlTag = function detectHtmlTag(source) {\n  return RE_HTML_TAG.test(source);\n};\nvar CHAR_SP = ' ';\nvar CHAR_CR = '\\r';\nvar CHAR_LF = '\\n';\nvar CHAR_LS = String.fromCharCode(0x2028);\nvar CHAR_PS = String.fromCharCode(0x2029);\nfunction createScanner(str) {\n  var _buf = str;\n  var _index = 0;\n  var _line = 1;\n  var _column = 1;\n  var _peekOffset = 0;\n  var isCRLF = function isCRLF(index) {\n    return _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\n  };\n  var isLF = function isLF(index) {\n    return _buf[index] === CHAR_LF;\n  };\n  var isPS = function isPS(index) {\n    return _buf[index] === CHAR_PS;\n  };\n  var isLS = function isLS(index) {\n    return _buf[index] === CHAR_LS;\n  };\n  var isLineEnd = function isLineEnd(index) {\n    return isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\n  };\n  var index = function index() {\n    return _index;\n  };\n  var line = function line() {\n    return _line;\n  };\n  var column = function column() {\n    return _column;\n  };\n  var peekOffset = function peekOffset() {\n    return _peekOffset;\n  };\n  var charAt = function charAt(offset) {\n    return isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n  };\n  var currentChar = function currentChar() {\n    return charAt(_index);\n  };\n  var currentPeek = function currentPeek() {\n    return charAt(_index + _peekOffset);\n  };\n  function next() {\n    _peekOffset = 0;\n    if (isLineEnd(_index)) {\n      _line++;\n      _column = 0;\n    }\n    if (isCRLF(_index)) {\n      _index++;\n    }\n    _index++;\n    _column++;\n    return _buf[_index];\n  }\n  function peek() {\n    if (isCRLF(_index + _peekOffset)) {\n      _peekOffset++;\n    }\n    _peekOffset++;\n    return _buf[_index + _peekOffset];\n  }\n  function reset() {\n    _index = 0;\n    _line = 1;\n    _column = 1;\n    _peekOffset = 0;\n  }\n  function resetPeek() {\n    var offset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    _peekOffset = offset;\n  }\n  function skipToPeek() {\n    var target = _index + _peekOffset;\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (target !== _index) {\n      next();\n    }\n    _peekOffset = 0;\n  }\n  return {\n    index: index,\n    line: line,\n    column: column,\n    peekOffset: peekOffset,\n    charAt: charAt,\n    currentChar: currentChar,\n    currentPeek: currentPeek,\n    next: next,\n    peek: peek,\n    reset: reset,\n    resetPeek: resetPeek,\n    skipToPeek: skipToPeek\n  };\n}\nvar EOF = undefined;\nvar DOT = '.';\nvar LITERAL_DELIMITER = \"'\";\nvar ERROR_DOMAIN$3 = 'tokenizer';\nfunction createTokenizer(source) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var location = options.location !== false;\n  var _scnr = createScanner(source);\n  var currentOffset = function currentOffset() {\n    return _scnr.index();\n  };\n  var currentPosition = function currentPosition() {\n    return createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n  };\n  var _initLoc = currentPosition();\n  var _initOffset = currentOffset();\n  var _context = {\n    currentType: 14 /* TokenTypes.EOF */,\n    offset: _initOffset,\n    startLoc: _initLoc,\n    endLoc: _initLoc,\n    lastType: 14 /* TokenTypes.EOF */,\n    lastOffset: _initOffset,\n    lastStartLoc: _initLoc,\n    lastEndLoc: _initLoc,\n    braceNest: 0,\n    inLinked: false,\n    text: ''\n  };\n  var context = function context() {\n    return _context;\n  };\n  var onError = options.onError;\n  function emitError(code, pos, offset) {\n    var ctx = context();\n    pos.column += offset;\n    pos.offset += offset;\n    if (onError) {\n      var loc = location ? createLocation(ctx.startLoc, pos) : null;\n      for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n        args[_key3 - 3] = arguments[_key3];\n      }\n      var err = createCompileError(code, loc, {\n        domain: ERROR_DOMAIN$3,\n        args: args\n      });\n      onError(err);\n    }\n  }\n  function getToken(context, type, value) {\n    context.endLoc = currentPosition();\n    context.currentType = type;\n    var token = {\n      type: type\n    };\n    if (location) {\n      token.loc = createLocation(context.startLoc, context.endLoc);\n    }\n    if (value != null) {\n      token.value = value;\n    }\n    return token;\n  }\n  var getEndToken = function getEndToken(context) {\n    return getToken(context, 14 /* TokenTypes.EOF */);\n  };\n  function eat(scnr, ch) {\n    if (scnr.currentChar() === ch) {\n      scnr.next();\n      return ch;\n    } else {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n      return '';\n    }\n  }\n  function peekSpaces(scnr) {\n    var buf = '';\n    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n      buf += scnr.currentPeek();\n      scnr.peek();\n    }\n    return buf;\n  }\n  function skipSpaces(scnr) {\n    var buf = peekSpaces(scnr);\n    scnr.skipToPeek();\n    return buf;\n  }\n  function isIdentifierStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    var cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc === 95 // _\n    ;\n  }\n  function isNumberStart(ch) {\n    if (ch === EOF) {\n      return false;\n    }\n    var cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57; // 0-9\n  }\n  function isNamedIdentifierStart(scnr, context) {\n    var currentType = context.currentType;\n    if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    var ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isListIdentifierStart(scnr, context) {\n    var currentType = context.currentType;\n    if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    var ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\n    var ret = isNumberStart(ch);\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLiteralStart(scnr, context) {\n    var currentType = context.currentType;\n    if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    var ret = scnr.currentPeek() === LITERAL_DELIMITER;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDotStart(scnr, context) {\n    var currentType = context.currentType;\n    if (currentType !== 8 /* TokenTypes.LinkedAlias */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    var ret = scnr.currentPeek() === \".\" /* TokenChars.LinkedDot */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedModifierStart(scnr, context) {\n    var currentType = context.currentType;\n    if (currentType !== 9 /* TokenTypes.LinkedDot */) {\n      return false;\n    }\n    peekSpaces(scnr);\n    var ret = isIdentifierStart(scnr.currentPeek());\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedDelimiterStart(scnr, context) {\n    var currentType = context.currentType;\n    if (!(currentType === 8 /* TokenTypes.LinkedAlias */ || currentType === 12 /* TokenTypes.LinkedModifier */)) {\n      return false;\n    }\n    peekSpaces(scnr);\n    var ret = scnr.currentPeek() === \":\" /* TokenChars.LinkedDelimiter */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function isLinkedReferStart(scnr, context) {\n    var currentType = context.currentType;\n    if (currentType !== 10 /* TokenTypes.LinkedDelimiter */) {\n      return false;\n    }\n    var _fn = function fn() {\n      var ch = scnr.currentPeek();\n      if (ch === \"{\" /* TokenChars.BraceLeft */) {\n        return isIdentifierStart(scnr.peek());\n      } else if (ch === \"@\" /* TokenChars.LinkedAlias */ || ch === \"%\" /* TokenChars.Modulo */ || ch === \"|\" /* TokenChars.Pipe */ || ch === \":\" /* TokenChars.LinkedDelimiter */ || ch === \".\" /* TokenChars.LinkedDot */ || ch === CHAR_SP || !ch) {\n        return false;\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return _fn();\n      } else {\n        // other characters\n        return isTextStart(scnr, false);\n      }\n    };\n    var ret = _fn();\n    scnr.resetPeek();\n    return ret;\n  }\n  function isPluralStart(scnr) {\n    peekSpaces(scnr);\n    var ret = scnr.currentPeek() === \"|\" /* TokenChars.Pipe */;\n    scnr.resetPeek();\n    return ret;\n  }\n  function detectModuloStart(scnr) {\n    var spaces = peekSpaces(scnr);\n    var ret = scnr.currentPeek() === \"%\" /* TokenChars.Modulo */ && scnr.peek() === \"{\" /* TokenChars.BraceLeft */;\n    scnr.resetPeek();\n    return {\n      isModulo: ret,\n      hasSpace: spaces.length > 0\n    };\n  }\n  function isTextStart(scnr) {\n    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var _fn2 = function fn() {\n      var hasSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var prev = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var detectModulo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var ch = scnr.currentPeek();\n      if (ch === \"{\" /* TokenChars.BraceLeft */) {\n        return prev === \"%\" /* TokenChars.Modulo */ ? false : hasSpace;\n      } else if (ch === \"@\" /* TokenChars.LinkedAlias */ || !ch) {\n        return prev === \"%\" /* TokenChars.Modulo */ ? true : hasSpace;\n      } else if (ch === \"%\" /* TokenChars.Modulo */) {\n        scnr.peek();\n        return _fn2(hasSpace, \"%\" /* TokenChars.Modulo */, true);\n      } else if (ch === \"|\" /* TokenChars.Pipe */) {\n        return prev === \"%\" /* TokenChars.Modulo */ || detectModulo ? true : !(prev === CHAR_SP || prev === CHAR_LF);\n      } else if (ch === CHAR_SP) {\n        scnr.peek();\n        return _fn2(true, CHAR_SP, detectModulo);\n      } else if (ch === CHAR_LF) {\n        scnr.peek();\n        return _fn2(true, CHAR_LF, detectModulo);\n      } else {\n        return true;\n      }\n    };\n    var ret = _fn2();\n    reset && scnr.resetPeek();\n    return ret;\n  }\n  function takeChar(scnr, fn) {\n    var ch = scnr.currentChar();\n    if (ch === EOF) {\n      return EOF;\n    }\n    if (fn(ch)) {\n      scnr.next();\n      return ch;\n    }\n    return null;\n  }\n  function isIdentifier(ch) {\n    var cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc >= 48 && cc <= 57 ||\n    // 0-9\n    cc === 95 ||\n    // _\n    cc === 36 // $\n    ;\n  }\n  function takeIdentifierChar(scnr) {\n    return takeChar(scnr, isIdentifier);\n  }\n  function isNamedIdentifier(ch) {\n    var cc = ch.charCodeAt(0);\n    return cc >= 97 && cc <= 122 ||\n    // a-z\n    cc >= 65 && cc <= 90 ||\n    // A-Z\n    cc >= 48 && cc <= 57 ||\n    // 0-9\n    cc === 95 ||\n    // _\n    cc === 36 ||\n    // $\n    cc === 45 // -\n    ;\n  }\n  function takeNamedIdentifierChar(scnr) {\n    return takeChar(scnr, isNamedIdentifier);\n  }\n  function isDigit(ch) {\n    var cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57; // 0-9\n  }\n  function takeDigit(scnr) {\n    return takeChar(scnr, isDigit);\n  }\n  function isHexDigit(ch) {\n    var cc = ch.charCodeAt(0);\n    return cc >= 48 && cc <= 57 ||\n    // 0-9\n    cc >= 65 && cc <= 70 ||\n    // A-F\n    cc >= 97 && cc <= 102; // a-f\n  }\n  function takeHexDigit(scnr) {\n    return takeChar(scnr, isHexDigit);\n  }\n  function getDigits(scnr) {\n    var ch = '';\n    var num = '';\n    while (ch = takeDigit(scnr)) {\n      num += ch;\n    }\n    return num;\n  }\n  function readModulo(scnr) {\n    skipSpaces(scnr);\n    var ch = scnr.currentChar();\n    if (ch !== \"%\" /* TokenChars.Modulo */) {\n      emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n    }\n    scnr.next();\n    return \"%\" /* TokenChars.Modulo */;\n  }\n  function readText(scnr) {\n    var buf = '';\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      var ch = scnr.currentChar();\n      if (ch === \"{\" /* TokenChars.BraceLeft */ || ch === \"}\" /* TokenChars.BraceRight */ || ch === \"@\" /* TokenChars.LinkedAlias */ || ch === \"|\" /* TokenChars.Pipe */ || !ch) {\n        break;\n      } else if (ch === \"%\" /* TokenChars.Modulo */) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else {\n          break;\n        }\n      } else if (ch === CHAR_SP || ch === CHAR_LF) {\n        if (isTextStart(scnr)) {\n          buf += ch;\n          scnr.next();\n        } else if (isPluralStart(scnr)) {\n          break;\n        } else {\n          buf += ch;\n          scnr.next();\n        }\n      } else {\n        buf += ch;\n        scnr.next();\n      }\n    }\n    return buf;\n  }\n  function readNamedIdentifier(scnr) {\n    skipSpaces(scnr);\n    var ch = '';\n    var name = '';\n    while (ch = takeNamedIdentifierChar(scnr)) {\n      name += ch;\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return name;\n  }\n  function readListIdentifier(scnr) {\n    skipSpaces(scnr);\n    var value = '';\n    if (scnr.currentChar() === '-') {\n      scnr.next();\n      value += \"-\".concat(getDigits(scnr));\n    } else {\n      value += getDigits(scnr);\n    }\n    if (scnr.currentChar() === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n    }\n    return value;\n  }\n  function isLiteral(ch) {\n    return ch !== LITERAL_DELIMITER && ch !== CHAR_LF;\n  }\n  function readLiteral(scnr) {\n    skipSpaces(scnr);\n    // eslint-disable-next-line no-useless-escape\n    eat(scnr, \"'\");\n    var ch = '';\n    var literal = '';\n    while (ch = takeChar(scnr, isLiteral)) {\n      if (ch === '\\\\') {\n        literal += readEscapeSequence(scnr);\n      } else {\n        literal += ch;\n      }\n    }\n    var current = scnr.currentChar();\n    if (current === CHAR_LF || current === EOF) {\n      emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n      // TODO: Is it correct really?\n      if (current === CHAR_LF) {\n        scnr.next();\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, \"'\");\n      }\n      return literal;\n    }\n    // eslint-disable-next-line no-useless-escape\n    eat(scnr, \"'\");\n    return literal;\n  }\n  function readEscapeSequence(scnr) {\n    var ch = scnr.currentChar();\n    switch (ch) {\n      case '\\\\':\n      case \"'\":\n        // eslint-disable-line no-useless-escape\n        scnr.next();\n        return \"\\\\\".concat(ch);\n      case 'u':\n        return readUnicodeEscapeSequence(scnr, ch, 4);\n      case 'U':\n        return readUnicodeEscapeSequence(scnr, ch, 6);\n      default:\n        emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n        return '';\n    }\n  }\n  function readUnicodeEscapeSequence(scnr, unicode, digits) {\n    eat(scnr, unicode);\n    var sequence = '';\n    for (var i = 0; i < digits; i++) {\n      var ch = takeHexDigit(scnr);\n      if (!ch) {\n        emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, \"\\\\\".concat(unicode).concat(sequence).concat(scnr.currentChar()));\n        break;\n      }\n      sequence += ch;\n    }\n    return \"\\\\\".concat(unicode).concat(sequence);\n  }\n  function isInvalidIdentifier(ch) {\n    return ch !== \"{\" /* TokenChars.BraceLeft */ && ch !== \"}\" /* TokenChars.BraceRight */ && ch !== CHAR_SP && ch !== CHAR_LF;\n  }\n  function readInvalidIdentifier(scnr) {\n    skipSpaces(scnr);\n    var ch = '';\n    var identifiers = '';\n    while (ch = takeChar(scnr, isInvalidIdentifier)) {\n      identifiers += ch;\n    }\n    return identifiers;\n  }\n  function readLinkedModifier(scnr) {\n    var ch = '';\n    var name = '';\n    while (ch = takeIdentifierChar(scnr)) {\n      name += ch;\n    }\n    return name;\n  }\n  function readLinkedRefer(scnr) {\n    var _fn3 = function fn(buf) {\n      var ch = scnr.currentChar();\n      if (ch === \"{\" /* TokenChars.BraceLeft */ || ch === \"%\" /* TokenChars.Modulo */ || ch === \"@\" /* TokenChars.LinkedAlias */ || ch === \"|\" /* TokenChars.Pipe */ || ch === \"(\" /* TokenChars.ParenLeft */ || ch === \")\" /* TokenChars.ParenRight */ || !ch) {\n        return buf;\n      } else if (ch === CHAR_SP) {\n        return buf;\n      } else if (ch === CHAR_LF || ch === DOT) {\n        buf += ch;\n        scnr.next();\n        return _fn3(buf);\n      } else {\n        buf += ch;\n        scnr.next();\n        return _fn3(buf);\n      }\n    };\n    return _fn3('');\n  }\n  function readPlural(scnr) {\n    skipSpaces(scnr);\n    var plural = eat(scnr, \"|\" /* TokenChars.Pipe */);\n    skipSpaces(scnr);\n    return plural;\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readTokenInPlaceholder(scnr, context) {\n    var token = null;\n    var ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\" /* TokenChars.BraceLeft */:\n        if (context.braceNest >= 1) {\n          emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context, 2 /* TokenTypes.BraceLeft */, \"{\" /* TokenChars.BraceLeft */);\n        skipSpaces(scnr);\n        context.braceNest++;\n        return token;\n      case \"}\" /* TokenChars.BraceRight */:\n        if (context.braceNest > 0 && context.currentType === 2 /* TokenTypes.BraceLeft */) {\n          emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n        }\n        scnr.next();\n        token = getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n        context.braceNest--;\n        context.braceNest > 0 && skipSpaces(scnr);\n        if (context.inLinked && context.braceNest === 0) {\n          context.inLinked = false;\n        }\n        return token;\n      case \"@\" /* TokenChars.LinkedAlias */:\n        if (context.braceNest > 0) {\n          emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        token = readTokenInLinked(scnr, context) || getEndToken(context);\n        context.braceNest = 0;\n        return token;\n      default:\n        {\n          var validNamedIdentifier = true;\n          var validListIdentifier = true;\n          var validLiteral = true;\n          if (isPluralStart(scnr)) {\n            if (context.braceNest > 0) {\n              emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n            }\n            token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n            // reset\n            context.braceNest = 0;\n            context.inLinked = false;\n            return token;\n          }\n          if (context.braceNest > 0 && (context.currentType === 5 /* TokenTypes.Named */ || context.currentType === 6 /* TokenTypes.List */ || context.currentType === 7 /* TokenTypes.Literal */)) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n            context.braceNest = 0;\n            return readToken(scnr, context);\n          }\n          if (validNamedIdentifier = isNamedIdentifierStart(scnr, context)) {\n            token = getToken(context, 5 /* TokenTypes.Named */, readNamedIdentifier(scnr));\n            skipSpaces(scnr);\n            return token;\n          }\n          if (validListIdentifier = isListIdentifierStart(scnr, context)) {\n            token = getToken(context, 6 /* TokenTypes.List */, readListIdentifier(scnr));\n            skipSpaces(scnr);\n            return token;\n          }\n          if (validLiteral = isLiteralStart(scnr, context)) {\n            token = getToken(context, 7 /* TokenTypes.Literal */, readLiteral(scnr));\n            skipSpaces(scnr);\n            return token;\n          }\n          if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n            // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\n            token = getToken(context, 13 /* TokenTypes.InvalidPlace */, readInvalidIdentifier(scnr));\n            emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n            skipSpaces(scnr);\n            return token;\n          }\n          break;\n        }\n    }\n    return token;\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readTokenInLinked(scnr, context) {\n    var currentType = context.currentType;\n    var token = null;\n    var ch = scnr.currentChar();\n    if ((currentType === 8 /* TokenTypes.LinkedAlias */ || currentType === 9 /* TokenTypes.LinkedDot */ || currentType === 12 /* TokenTypes.LinkedModifier */ || currentType === 10 /* TokenTypes.LinkedDelimiter */) && (ch === CHAR_LF || ch === CHAR_SP)) {\n      emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n    }\n    switch (ch) {\n      case \"@\" /* TokenChars.LinkedAlias */:\n        scnr.next();\n        token = getToken(context, 8 /* TokenTypes.LinkedAlias */, \"@\" /* TokenChars.LinkedAlias */);\n        context.inLinked = true;\n        return token;\n      case \".\" /* TokenChars.LinkedDot */:\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context, 9 /* TokenTypes.LinkedDot */, \".\" /* TokenChars.LinkedDot */);\n      case \":\" /* TokenChars.LinkedDelimiter */:\n        skipSpaces(scnr);\n        scnr.next();\n        return getToken(context, 10 /* TokenTypes.LinkedDelimiter */, \":\" /* TokenChars.LinkedDelimiter */);\n      default:\n        if (isPluralStart(scnr)) {\n          token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n          // reset\n          context.braceNest = 0;\n          context.inLinked = false;\n          return token;\n        }\n        if (isLinkedDotStart(scnr, context) || isLinkedDelimiterStart(scnr, context)) {\n          skipSpaces(scnr);\n          return readTokenInLinked(scnr, context);\n        }\n        if (isLinkedModifierStart(scnr, context)) {\n          skipSpaces(scnr);\n          return getToken(context, 12 /* TokenTypes.LinkedModifier */, readLinkedModifier(scnr));\n        }\n        if (isLinkedReferStart(scnr, context)) {\n          skipSpaces(scnr);\n          if (ch === \"{\" /* TokenChars.BraceLeft */) {\n            // scan the placeholder\n            return readTokenInPlaceholder(scnr, context) || token;\n          } else {\n            return getToken(context, 11 /* TokenTypes.LinkedKey */, readLinkedRefer(scnr));\n          }\n        }\n        if (currentType === 8 /* TokenTypes.LinkedAlias */) {\n          emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        context.braceNest = 0;\n        context.inLinked = false;\n        return readToken(scnr, context);\n    }\n  }\n  // TODO: We need refactoring of token parsing ...\n  function readToken(scnr, context) {\n    var token = {\n      type: 14 /* TokenTypes.EOF */\n    };\n    if (context.braceNest > 0) {\n      return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n    }\n    if (context.inLinked) {\n      return readTokenInLinked(scnr, context) || getEndToken(context);\n    }\n    var ch = scnr.currentChar();\n    switch (ch) {\n      case \"{\" /* TokenChars.BraceLeft */:\n        return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n      case \"}\" /* TokenChars.BraceRight */:\n        emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n        scnr.next();\n        return getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n      case \"@\" /* TokenChars.LinkedAlias */:\n        return readTokenInLinked(scnr, context) || getEndToken(context);\n      default:\n        {\n          if (isPluralStart(scnr)) {\n            token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n            // reset\n            context.braceNest = 0;\n            context.inLinked = false;\n            return token;\n          }\n          var _detectModuloStart = detectModuloStart(scnr),\n            isModulo = _detectModuloStart.isModulo,\n            hasSpace = _detectModuloStart.hasSpace;\n          if (isModulo) {\n            return hasSpace ? getToken(context, 0 /* TokenTypes.Text */, readText(scnr)) : getToken(context, 4 /* TokenTypes.Modulo */, readModulo(scnr));\n          }\n          if (isTextStart(scnr)) {\n            return getToken(context, 0 /* TokenTypes.Text */, readText(scnr));\n          }\n          break;\n        }\n    }\n    return token;\n  }\n  function nextToken() {\n    var currentType = _context.currentType,\n      offset = _context.offset,\n      startLoc = _context.startLoc,\n      endLoc = _context.endLoc;\n    _context.lastType = currentType;\n    _context.lastOffset = offset;\n    _context.lastStartLoc = startLoc;\n    _context.lastEndLoc = endLoc;\n    _context.offset = currentOffset();\n    _context.startLoc = currentPosition();\n    if (_scnr.currentChar() === EOF) {\n      return getToken(_context, 14 /* TokenTypes.EOF */);\n    }\n    return readToken(_scnr, _context);\n  }\n  return {\n    nextToken: nextToken,\n    currentOffset: currentOffset,\n    currentPosition: currentPosition,\n    context: context\n  };\n}\nvar ERROR_DOMAIN$2 = 'parser';\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\nvar KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n  switch (match) {\n    case \"\\\\\\\\\":\n      return \"\\\\\";\n    // eslint-disable-next-line no-useless-escape\n    case \"\\\\'\":\n      // eslint-disable-next-line no-useless-escape\n      return \"'\";\n    default:\n      {\n        var codePoint = parseInt(codePoint4 || codePoint6, 16);\n        if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\n          return String.fromCodePoint(codePoint);\n        }\n        // invalid ...\n        // Replace them with U+FFFD REPLACEMENT CHARACTER.\n        return '�';\n      }\n  }\n}\nfunction createParser() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var location = options.location !== false;\n  var onError = options.onError,\n    onWarn = options.onWarn;\n  function emitError(tokenzer, code, start, offset) {\n    var end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onError) {\n      var loc = location ? createLocation(start, end) : null;\n      for (var _len4 = arguments.length, args = new Array(_len4 > 4 ? _len4 - 4 : 0), _key4 = 4; _key4 < _len4; _key4++) {\n        args[_key4 - 4] = arguments[_key4];\n      }\n      var err = createCompileError(code, loc, {\n        domain: ERROR_DOMAIN$2,\n        args: args\n      });\n      onError(err);\n    }\n  }\n  function emitWarn(tokenzer, code, start, offset) {\n    var end = tokenzer.currentPosition();\n    end.offset += offset;\n    end.column += offset;\n    if (onWarn) {\n      var loc = location ? createLocation(start, end) : null;\n      for (var _len5 = arguments.length, args = new Array(_len5 > 4 ? _len5 - 4 : 0), _key5 = 4; _key5 < _len5; _key5++) {\n        args[_key5 - 4] = arguments[_key5];\n      }\n      onWarn(createCompileWarn(code, loc, args));\n    }\n  }\n  function startNode(type, offset, loc) {\n    var node = {\n      type: type\n    };\n    if (location) {\n      node.start = offset;\n      node.end = offset;\n      node.loc = {\n        start: loc,\n        end: loc\n      };\n    }\n    return node;\n  }\n  function endNode(node, offset, pos, type) {\n    if (type) {\n      node.type = type;\n    }\n    if (location) {\n      node.end = offset;\n      if (node.loc) {\n        node.loc.end = pos;\n      }\n    }\n  }\n  function parseText(tokenizer, value) {\n    var context = tokenizer.context();\n    var node = startNode(3 /* NodeTypes.Text */, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseList(tokenizer, index) {\n    var context = tokenizer.context();\n    var offset = context.lastOffset,\n      loc = context.lastStartLoc; // get brace left loc\n    var node = startNode(5 /* NodeTypes.List */, offset, loc);\n    node.index = parseInt(index, 10);\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseNamed(tokenizer, key, modulo) {\n    var context = tokenizer.context();\n    var offset = context.lastOffset,\n      loc = context.lastStartLoc; // get brace left loc\n    var node = startNode(4 /* NodeTypes.Named */, offset, loc);\n    node.key = key;\n    if (modulo === true) {\n      node.modulo = true;\n    }\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLiteral(tokenizer, value) {\n    var context = tokenizer.context();\n    var offset = context.lastOffset,\n      loc = context.lastStartLoc; // get brace left loc\n    var node = startNode(9 /* NodeTypes.Literal */, offset, loc);\n    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n    tokenizer.nextToken(); // skip brach right\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinkedModifier(tokenizer) {\n    var token = tokenizer.nextToken();\n    var context = tokenizer.context();\n    var offset = context.lastOffset,\n      loc = context.lastStartLoc; // get linked dot loc\n    var node = startNode(8 /* NodeTypes.LinkedModifier */, offset, loc);\n    if (token.type !== 12 /* TokenTypes.LinkedModifier */) {\n      // empty modifier\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n      node.value = '';\n      endNode(node, offset, loc);\n      return {\n        nextConsumeToken: token,\n        node: node\n      };\n    }\n    // check token\n    if (token.value == null) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    node.value = token.value || '';\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: node\n    };\n  }\n  function parseLinkedKey(tokenizer, value) {\n    var context = tokenizer.context();\n    var node = startNode(7 /* NodeTypes.LinkedKey */, context.offset, context.startLoc);\n    node.value = value;\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseLinked(tokenizer) {\n    var context = tokenizer.context();\n    var linkedNode = startNode(6 /* NodeTypes.Linked */, context.offset, context.startLoc);\n    var token = tokenizer.nextToken();\n    if (token.type === 9 /* TokenTypes.LinkedDot */) {\n      var parsed = parseLinkedModifier(tokenizer);\n      linkedNode.modifier = parsed.node;\n      token = parsed.nextConsumeToken || tokenizer.nextToken();\n    }\n    // asset check token\n    if (token.type !== 10 /* TokenTypes.LinkedDelimiter */) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n    }\n    token = tokenizer.nextToken();\n    // skip brace left\n    if (token.type === 2 /* TokenTypes.BraceLeft */) {\n      token = tokenizer.nextToken();\n    }\n    switch (token.type) {\n      case 11 /* TokenTypes.LinkedKey */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\n        break;\n      case 5 /* TokenTypes.Named */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseNamed(tokenizer, token.value || '');\n        break;\n      case 6 /* TokenTypes.List */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseList(tokenizer, token.value || '');\n        break;\n      case 7 /* TokenTypes.Literal */:\n        if (token.value == null) {\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        linkedNode.key = parseLiteral(tokenizer, token.value || '');\n        break;\n      default:\n        {\n          // empty key\n          emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n          var nextContext = tokenizer.context();\n          var emptyLinkedKeyNode = startNode(7 /* NodeTypes.LinkedKey */, nextContext.offset, nextContext.startLoc);\n          emptyLinkedKeyNode.value = '';\n          endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n          linkedNode.key = emptyLinkedKeyNode;\n          endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n          return {\n            nextConsumeToken: token,\n            node: linkedNode\n          };\n        }\n    }\n    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return {\n      node: linkedNode\n    };\n  }\n  function parseMessage(tokenizer) {\n    var context = tokenizer.context();\n    var startOffset = context.currentType === 1 /* TokenTypes.Pipe */ ? tokenizer.currentOffset() : context.offset;\n    var startLoc = context.currentType === 1 /* TokenTypes.Pipe */ ? context.endLoc : context.startLoc;\n    var node = startNode(2 /* NodeTypes.Message */, startOffset, startLoc);\n    node.items = [];\n    var nextToken = null;\n    var modulo = null;\n    do {\n      var token = nextToken || tokenizer.nextToken();\n      nextToken = null;\n      switch (token.type) {\n        case 0 /* TokenTypes.Text */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseText(tokenizer, token.value || ''));\n          break;\n        case 6 /* TokenTypes.List */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseList(tokenizer, token.value || ''));\n          break;\n        case 4 /* TokenTypes.Modulo */:\n          modulo = true;\n          break;\n        case 5 /* TokenTypes.Named */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseNamed(tokenizer, token.value || '', !!modulo));\n          if (modulo) {\n            emitWarn(tokenizer, CompileWarnCodes.USE_MODULO_SYNTAX, context.lastStartLoc, 0, getTokenCaption(token));\n            modulo = null;\n          }\n          break;\n        case 7 /* TokenTypes.Literal */:\n          if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n          }\n          node.items.push(parseLiteral(tokenizer, token.value || ''));\n          break;\n        case 8 /* TokenTypes.LinkedAlias */:\n          {\n            var parsed = parseLinked(tokenizer);\n            node.items.push(parsed.node);\n            nextToken = parsed.nextConsumeToken || null;\n            break;\n          }\n      }\n    } while (context.currentType !== 14 /* TokenTypes.EOF */ && context.currentType !== 1 /* TokenTypes.Pipe */);\n    // adjust message node loc\n    var endOffset = context.currentType === 1 /* TokenTypes.Pipe */ ? context.lastOffset : tokenizer.currentOffset();\n    var endLoc = context.currentType === 1 /* TokenTypes.Pipe */ ? context.lastEndLoc : tokenizer.currentPosition();\n    endNode(node, endOffset, endLoc);\n    return node;\n  }\n  function parsePlural(tokenizer, offset, loc, msgNode) {\n    var context = tokenizer.context();\n    var hasEmptyMessage = msgNode.items.length === 0;\n    var node = startNode(1 /* NodeTypes.Plural */, offset, loc);\n    node.cases = [];\n    node.cases.push(msgNode);\n    do {\n      var msg = parseMessage(tokenizer);\n      if (!hasEmptyMessage) {\n        hasEmptyMessage = msg.items.length === 0;\n      }\n      node.cases.push(msg);\n    } while (context.currentType !== 14 /* TokenTypes.EOF */);\n    if (hasEmptyMessage) {\n      emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  function parseResource(tokenizer) {\n    var context = tokenizer.context();\n    var offset = context.offset,\n      startLoc = context.startLoc;\n    var msgNode = parseMessage(tokenizer);\n    if (context.currentType === 14 /* TokenTypes.EOF */) {\n      return msgNode;\n    } else {\n      return parsePlural(tokenizer, offset, startLoc, msgNode);\n    }\n  }\n  function parse(source) {\n    var tokenizer = createTokenizer(source, assign({}, options));\n    var context = tokenizer.context();\n    var node = startNode(0 /* NodeTypes.Resource */, context.offset, context.startLoc);\n    if (location && node.loc) {\n      node.loc.source = source;\n    }\n    node.body = parseResource(tokenizer);\n    if (options.onCacheKey) {\n      node.cacheKey = options.onCacheKey(source);\n    }\n    // assert whether achieved to EOF\n    if (context.currentType !== 14 /* TokenTypes.EOF */) {\n      emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\n    }\n    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n    return node;\n  }\n  return {\n    parse: parse\n  };\n}\nfunction getTokenCaption(token) {\n  if (token.type === 14 /* TokenTypes.EOF */) {\n    return 'EOF';\n  }\n  var name = (token.value || '').replace(/\\r?\\n/g, '\\\\n');\n  return name.length > 10 ? name.slice(0, 9) + '…' : name;\n}\nfunction createTransformer(ast) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _context = {\n    ast: ast,\n    helpers: new Set()\n  };\n  var context = function context() {\n    return _context;\n  };\n  var helper = function helper(name) {\n    _context.helpers.add(name);\n    return name;\n  };\n  return {\n    context: context,\n    helper: helper\n  };\n}\nfunction traverseNodes(nodes, transformer) {\n  for (var i = 0; i < nodes.length; i++) {\n    traverseNode(nodes[i], transformer);\n  }\n}\nfunction traverseNode(node, transformer) {\n  // TODO: if we need pre-hook of transform, should be implemented to here\n  switch (node.type) {\n    case 1 /* NodeTypes.Plural */:\n      traverseNodes(node.cases, transformer);\n      transformer.helper(\"plural\" /* HelperNameMap.PLURAL */);\n      break;\n    case 2 /* NodeTypes.Message */:\n      traverseNodes(node.items, transformer);\n      break;\n    case 6 /* NodeTypes.Linked */:\n      {\n        var linked = node;\n        traverseNode(linked.key, transformer);\n        transformer.helper(\"linked\" /* HelperNameMap.LINKED */);\n        transformer.helper(\"type\" /* HelperNameMap.TYPE */);\n        break;\n      }\n    case 5 /* NodeTypes.List */:\n      transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n      transformer.helper(\"list\" /* HelperNameMap.LIST */);\n      break;\n    case 4 /* NodeTypes.Named */:\n      transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n      transformer.helper(\"named\" /* HelperNameMap.NAMED */);\n      break;\n  }\n  // TODO: if we need post-hook of transform, should be implemented to here\n}\n// transform AST\nfunction transform(ast) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var transformer = createTransformer(ast);\n  transformer.helper(\"normalize\" /* HelperNameMap.NORMALIZE */);\n  // traverse\n  ast.body && traverseNode(ast.body, transformer);\n  // set meta information\n  var context = transformer.context();\n  ast.helpers = Array.from(context.helpers);\n}\nfunction optimize(ast) {\n  var body = ast.body;\n  if (body.type === 2 /* NodeTypes.Message */) {\n    optimizeMessageNode(body);\n  } else {\n    body.cases.forEach(function (c) {\n      return optimizeMessageNode(c);\n    });\n  }\n  return ast;\n}\nfunction optimizeMessageNode(message) {\n  if (message.items.length === 1) {\n    var item = message.items[0];\n    if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n      message[\"static\"] = item.value;\n      delete item.value; // optimization for size\n    }\n  } else {\n    var values = [];\n    for (var i = 0; i < message.items.length; i++) {\n      var _item = message.items[i];\n      if (!(_item.type === 3 /* NodeTypes.Text */ || _item.type === 9 /* NodeTypes.Literal */)) {\n        break;\n      }\n      if (_item.value == null) {\n        break;\n      }\n      values.push(_item.value);\n    }\n    if (values.length === message.items.length) {\n      message[\"static\"] = join(values);\n      for (var _i = 0; _i < message.items.length; _i++) {\n        var _item2 = message.items[_i];\n        if (_item2.type === 3 /* NodeTypes.Text */ || _item2.type === 9 /* NodeTypes.Literal */) {\n          delete _item2.value; // optimization for size\n        }\n      }\n    }\n  }\n}\nvar ERROR_DOMAIN$1 = 'minifier';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction minify(node) {\n  node.t = node.type;\n  switch (node.type) {\n    case 0 /* NodeTypes.Resource */:\n      {\n        var resource = node;\n        minify(resource.body);\n        resource.b = resource.body;\n        delete resource.body;\n        break;\n      }\n    case 1 /* NodeTypes.Plural */:\n      {\n        var plural = node;\n        var cases = plural.cases;\n        for (var i = 0; i < cases.length; i++) {\n          minify(cases[i]);\n        }\n        plural.c = cases;\n        delete plural.cases;\n        break;\n      }\n    case 2 /* NodeTypes.Message */:\n      {\n        var message = node;\n        var items = message.items;\n        for (var _i2 = 0; _i2 < items.length; _i2++) {\n          minify(items[_i2]);\n        }\n        message.i = items;\n        delete message.items;\n        if (message[\"static\"]) {\n          message.s = message[\"static\"];\n          delete message[\"static\"];\n        }\n        break;\n      }\n    case 3 /* NodeTypes.Text */:\n    case 9 /* NodeTypes.Literal */:\n    case 8 /* NodeTypes.LinkedModifier */:\n    case 7 /* NodeTypes.LinkedKey */:\n      {\n        var valueNode = node;\n        if (valueNode.value) {\n          valueNode.v = valueNode.value;\n          delete valueNode.value;\n        }\n        break;\n      }\n    case 6 /* NodeTypes.Linked */:\n      {\n        var linked = node;\n        minify(linked.key);\n        linked.k = linked.key;\n        delete linked.key;\n        if (linked.modifier) {\n          minify(linked.modifier);\n          linked.m = linked.modifier;\n          delete linked.modifier;\n        }\n        break;\n      }\n    case 5 /* NodeTypes.List */:\n      {\n        var list = node;\n        list.i = list.index;\n        delete list.index;\n        break;\n      }\n    case 4 /* NodeTypes.Named */:\n      {\n        var named = node;\n        named.k = named.key;\n        delete named.key;\n        break;\n      }\n    default:\n      {\n        throw createCompileError(CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE, null, {\n          domain: ERROR_DOMAIN$1,\n          args: [node.type]\n        });\n      }\n  }\n  delete node.type;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference types=\"source-map-js\" />\nvar ERROR_DOMAIN = 'parser';\nfunction createCodeGenerator(ast, options) {\n  var sourceMap = options.sourceMap,\n    filename = options.filename,\n    breakLineCode = options.breakLineCode,\n    _needIndent = options.needIndent;\n  var location = options.location !== false;\n  var _context = {\n    filename: filename,\n    code: '',\n    column: 1,\n    line: 1,\n    offset: 0,\n    map: undefined,\n    breakLineCode: breakLineCode,\n    needIndent: _needIndent,\n    indentLevel: 0\n  };\n  if (location && ast.loc) {\n    _context.source = ast.loc.source;\n  }\n  var context = function context() {\n    return _context;\n  };\n  function push(code, node) {\n    _context.code += code;\n  }\n  function _newline(n) {\n    var withBreakLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var _breakLineCode = withBreakLine ? breakLineCode : '';\n    push(_needIndent ? _breakLineCode + \"  \".repeat(n) : _breakLineCode);\n  }\n  function indent() {\n    var withNewLine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var level = ++_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function deindent() {\n    var withNewLine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var level = --_context.indentLevel;\n    withNewLine && _newline(level);\n  }\n  function newline() {\n    _newline(_context.indentLevel);\n  }\n  var helper = function helper(key) {\n    return \"_\".concat(key);\n  };\n  var needIndent = function needIndent() {\n    return _context.needIndent;\n  };\n  return {\n    context: context,\n    push: push,\n    indent: indent,\n    deindent: deindent,\n    newline: newline,\n    helper: helper,\n    needIndent: needIndent\n  };\n}\nfunction generateLinkedNode(generator, node) {\n  var helper = generator.helper;\n  generator.push(\"\".concat(helper(\"linked\" /* HelperNameMap.LINKED */), \"(\"));\n  generateNode(generator, node.key);\n  if (node.modifier) {\n    generator.push(\", \");\n    generateNode(generator, node.modifier);\n    generator.push(\", _type\");\n  } else {\n    generator.push(\", undefined, _type\");\n  }\n  generator.push(\")\");\n}\nfunction generateMessageNode(generator, node) {\n  var helper = generator.helper,\n    needIndent = generator.needIndent;\n  generator.push(\"\".concat(helper(\"normalize\" /* HelperNameMap.NORMALIZE */), \"([\"));\n  generator.indent(needIndent());\n  var length = node.items.length;\n  for (var i = 0; i < length; i++) {\n    generateNode(generator, node.items[i]);\n    if (i === length - 1) {\n      break;\n    }\n    generator.push(', ');\n  }\n  generator.deindent(needIndent());\n  generator.push('])');\n}\nfunction generatePluralNode(generator, node) {\n  var helper = generator.helper,\n    needIndent = generator.needIndent;\n  if (node.cases.length > 1) {\n    generator.push(\"\".concat(helper(\"plural\" /* HelperNameMap.PLURAL */), \"([\"));\n    generator.indent(needIndent());\n    var length = node.cases.length;\n    for (var i = 0; i < length; i++) {\n      generateNode(generator, node.cases[i]);\n      if (i === length - 1) {\n        break;\n      }\n      generator.push(', ');\n    }\n    generator.deindent(needIndent());\n    generator.push(\"])\");\n  }\n}\nfunction generateResource(generator, node) {\n  if (node.body) {\n    generateNode(generator, node.body);\n  } else {\n    generator.push('null');\n  }\n}\nfunction generateNode(generator, node) {\n  var helper = generator.helper;\n  switch (node.type) {\n    case 0 /* NodeTypes.Resource */:\n      generateResource(generator, node);\n      break;\n    case 1 /* NodeTypes.Plural */:\n      generatePluralNode(generator, node);\n      break;\n    case 2 /* NodeTypes.Message */:\n      generateMessageNode(generator, node);\n      break;\n    case 6 /* NodeTypes.Linked */:\n      generateLinkedNode(generator, node);\n      break;\n    case 8 /* NodeTypes.LinkedModifier */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 7 /* NodeTypes.LinkedKey */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 5 /* NodeTypes.List */:\n      generator.push(\"\".concat(helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */), \"(\").concat(helper(\"list\" /* HelperNameMap.LIST */), \"(\").concat(node.index, \"))\"), node);\n      break;\n    case 4 /* NodeTypes.Named */:\n      generator.push(\"\".concat(helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */), \"(\").concat(helper(\"named\" /* HelperNameMap.NAMED */), \"(\").concat(JSON.stringify(node.key), \"))\"), node);\n      break;\n    case 9 /* NodeTypes.Literal */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    case 3 /* NodeTypes.Text */:\n      generator.push(JSON.stringify(node.value), node);\n      break;\n    default:\n      {\n        throw createCompileError(CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE, null, {\n          domain: ERROR_DOMAIN,\n          args: [node.type]\n        });\n      }\n  }\n}\n// generate code from AST\nvar generate = function generate(ast) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var mode = isString(options.mode) ? options.mode : 'normal';\n  var filename = isString(options.filename) ? options.filename : 'message.intl';\n  var sourceMap = !!options.sourceMap;\n  // prettier-ignore\n  var breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === 'arrow' ? ';' : '\\n';\n  var needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\n  var helpers = ast.helpers || [];\n  var generator = createCodeGenerator(ast, {\n    mode: mode,\n    filename: filename,\n    sourceMap: sourceMap,\n    breakLineCode: breakLineCode,\n    needIndent: needIndent\n  });\n  generator.push(mode === 'normal' ? \"function __msg__ (ctx) {\" : \"(ctx) => {\");\n  generator.indent(needIndent);\n  if (helpers.length > 0) {\n    generator.push(\"const { \".concat(join(helpers.map(function (s) {\n      return \"\".concat(s, \": _\").concat(s);\n    }), ', '), \" } = ctx\"));\n    generator.newline();\n  }\n  generator.push(\"return \");\n  generateNode(generator, ast);\n  generator.deindent(needIndent);\n  generator.push(\"}\");\n  delete ast.helpers;\n  var _generator$context = generator.context(),\n    code = _generator$context.code,\n    map = _generator$context.map;\n  return {\n    ast: ast,\n    code: code,\n    map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\n  };\n};\nfunction baseCompile(source) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var assignedOptions = assign({}, options);\n  var jit = !!assignedOptions.jit;\n  var enalbeMinify = !!assignedOptions.minify;\n  var enambeOptimize = assignedOptions.optimize == null ? true : assignedOptions.optimize;\n  // parse source codes\n  var parser = createParser(assignedOptions);\n  var ast = parser.parse(source);\n  if (!jit) {\n    // transform ASTs\n    transform(ast, assignedOptions);\n    // generate javascript codes\n    return generate(ast, assignedOptions);\n  } else {\n    // optimize ASTs\n    enambeOptimize && optimize(ast);\n    // minimize ASTs\n    enalbeMinify && minify(ast);\n    // In JIT mode, no ast transform, no code generation.\n    return {\n      ast: ast,\n      code: ''\n    };\n  }\n}\nexport { CompileErrorCodes, CompileWarnCodes, ERROR_DOMAIN$2 as ERROR_DOMAIN, LOCATION_STUB, baseCompile, createCompileError, createCompileWarn, createLocation, createParser, createPosition, defaultOnError, detectHtmlTag, errorMessages, warnMessages };","map":{"version":3,"names":["LOCATION_STUB","start","line","column","offset","end","createPosition","createLocation","source","loc","RE_ARGS","format","message","_len","arguments","length","args","Array","_key","isObject","hasOwnProperty","replace","match","identifier","assign","Object","isString","val","_typeof","join","items","separator","undefined","reduce","str","item","index","CompileWarnCodes","USE_MODULO_SYNTAX","__EXTEND_POINT__","warnMessages","_defineProperty","createCompileWarn","code","_len2","_key2","msg","apply","concat","_toConsumableArray","String","location","CompileErrorCodes","EXPECTED_TOKEN","INVALID_TOKEN_IN_PLACEHOLDER","UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER","UNKNOWN_ESCAPE_SEQUENCE","INVALID_UNICODE_ESCAPE_SEQUENCE","UNBALANCED_CLOSING_BRACE","UNTERMINATED_CLOSING_BRACE","EMPTY_PLACEHOLDER","NOT_ALLOW_NEST_PLACEHOLDER","INVALID_LINKED_FORMAT","MUST_HAVE_MESSAGES_IN_PLURAL","UNEXPECTED_EMPTY_LINKED_MODIFIER","UNEXPECTED_EMPTY_LINKED_KEY","UNEXPECTED_LEXICAL_ANALYSIS","UNHANDLED_CODEGEN_NODE_TYPE","UNHANDLED_MINIFIER_NODE_TYPE","errorMessages","_errorMessages","createCompileError","options","domain","messages","error","SyntaxError","defaultOnError","RE_HTML_TAG","detectHtmlTag","test","CHAR_SP","CHAR_CR","CHAR_LF","CHAR_LS","fromCharCode","CHAR_PS","createScanner","_buf","_index","_line","_column","_peekOffset","isCRLF","isLF","isPS","isLS","isLineEnd","peekOffset","charAt","currentChar","currentPeek","next","peek","reset","resetPeek","skipToPeek","target","EOF","DOT","LITERAL_DELIMITER","ERROR_DOMAIN$3","createTokenizer","_scnr","currentOffset","currentPosition","_initLoc","_initOffset","_context","currentType","startLoc","endLoc","lastType","lastOffset","lastStartLoc","lastEndLoc","braceNest","inLinked","text","context","onError","emitError","pos","ctx","_len3","_key3","err","getToken","type","value","token","getEndToken","eat","scnr","ch","peekSpaces","buf","skipSpaces","isIdentifierStart","cc","charCodeAt","isNumberStart","isNamedIdentifierStart","ret","isListIdentifierStart","isLiteralStart","isLinkedDotStart","isLinkedModifierStart","isLinkedDelimiterStart","isLinkedReferStart","fn","isTextStart","isPluralStart","detectModuloStart","spaces","isModulo","hasSpace","prev","detectModulo","takeChar","isIdentifier","takeIdentifierChar","isNamedIdentifier","takeNamedIdentifierChar","isDigit","takeDigit","isHexDigit","takeHexDigit","getDigits","num","readModulo","readText","readNamedIdentifier","name","readListIdentifier","isLiteral","readLiteral","literal","readEscapeSequence","current","readUnicodeEscapeSequence","unicode","digits","sequence","i","isInvalidIdentifier","readInvalidIdentifier","identifiers","readLinkedModifier","readLinkedRefer","readPlural","plural","readTokenInPlaceholder","readTokenInLinked","validNamedIdentifier","validListIdentifier","validLiteral","readToken","_detectModuloStart","nextToken","ERROR_DOMAIN$2","KNOWN_ESCAPES","fromEscapeSequence","codePoint4","codePoint6","codePoint","parseInt","fromCodePoint","createParser","onWarn","tokenzer","_len4","_key4","emitWarn","_len5","_key5","startNode","node","endNode","parseText","tokenizer","parseList","parseNamed","key","modulo","parseLiteral","parseLinkedModifier","nextConsumeToken","getTokenCaption","parseLinkedKey","parseLinked","linkedNode","parsed","modifier","nextContext","emptyLinkedKeyNode","parseMessage","startOffset","push","endOffset","parsePlural","msgNode","hasEmptyMessage","cases","parseResource","parse","body","onCacheKey","cacheKey","slice","createTransformer","ast","helpers","Set","helper","add","traverseNodes","nodes","transformer","traverseNode","linked","transform","from","optimize","optimizeMessageNode","forEach","c","values","ERROR_DOMAIN$1","minify","t","resource","b","s","valueNode","v","k","m","list","named","ERROR_DOMAIN","createCodeGenerator","sourceMap","filename","breakLineCode","_needIndent","needIndent","map","indentLevel","_newline","n","withBreakLine","_breakLineCode","repeat","indent","withNewLine","level","deindent","newline","generateLinkedNode","generator","generateNode","generateMessageNode","generatePluralNode","generateResource","JSON","stringify","generate","mode","_generator$context","toJSON","baseCompile","assignedOptions","jit","enalbeMinify","enambeOptimize","parser"],"sources":["C:/Users/USER/Desktop/PIO-FRONT/theme/node_modules/@intlify/message-compiler/dist/message-compiler.esm-browser.js"],"sourcesContent":["/*!\n  * message-compiler v9.14.1\n  * (c) 2024 kazuya kawaguchi\n  * Released under the MIT License.\n  */\nconst LOCATION_STUB = {\n    start: { line: 1, column: 1, offset: 0 },\n    end: { line: 1, column: 1, offset: 0 }\n};\nfunction createPosition(line, column, offset) {\n    return { line, column, offset };\n}\nfunction createLocation(start, end, source) {\n    const loc = { start, end };\n    if (source != null) {\n        loc.source = source;\n    }\n    return loc;\n}\n\n/**\n * Original Utilities\n * written by kazuya kawaguchi\n */\nconst RE_ARGS = /\\{([0-9a-zA-Z]+)\\}/g;\n/* eslint-disable */\nfunction format(message, ...args) {\n    if (args.length === 1 && isObject(args[0])) {\n        args = args[0];\n    }\n    if (!args || !args.hasOwnProperty) {\n        args = {};\n    }\n    return message.replace(RE_ARGS, (match, identifier) => {\n        return args.hasOwnProperty(identifier) ? args[identifier] : '';\n    });\n}\nconst assign = Object.assign;\nconst isString = (val) => typeof val === 'string';\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isObject = (val) => val !== null && typeof val === 'object';\nfunction join(items, separator = '') {\n    return items.reduce((str, item, index) => (index === 0 ? str + item : str + separator + item), '');\n}\n\nconst CompileWarnCodes = {\n    USE_MODULO_SYNTAX: 1,\n    __EXTEND_POINT__: 2\n};\n/** @internal */\nconst warnMessages = {\n    [CompileWarnCodes.USE_MODULO_SYNTAX]: `Use modulo before '{{0}}'.`\n};\nfunction createCompileWarn(code, loc, ...args) {\n    const msg = format(warnMessages[code] || '', ...(args || [])) ;\n    const message = { message: String(msg), code };\n    if (loc) {\n        message.location = loc;\n    }\n    return message;\n}\n\nconst CompileErrorCodes = {\n    // tokenizer error codes\n    EXPECTED_TOKEN: 1,\n    INVALID_TOKEN_IN_PLACEHOLDER: 2,\n    UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER: 3,\n    UNKNOWN_ESCAPE_SEQUENCE: 4,\n    INVALID_UNICODE_ESCAPE_SEQUENCE: 5,\n    UNBALANCED_CLOSING_BRACE: 6,\n    UNTERMINATED_CLOSING_BRACE: 7,\n    EMPTY_PLACEHOLDER: 8,\n    NOT_ALLOW_NEST_PLACEHOLDER: 9,\n    INVALID_LINKED_FORMAT: 10,\n    // parser error codes\n    MUST_HAVE_MESSAGES_IN_PLURAL: 11,\n    UNEXPECTED_EMPTY_LINKED_MODIFIER: 12,\n    UNEXPECTED_EMPTY_LINKED_KEY: 13,\n    UNEXPECTED_LEXICAL_ANALYSIS: 14,\n    // generator error codes\n    UNHANDLED_CODEGEN_NODE_TYPE: 15,\n    // minifier error codes\n    UNHANDLED_MINIFIER_NODE_TYPE: 16,\n    // Special value for higher-order compilers to pick up the last code\n    // to avoid collision of error codes. This should always be kept as the last\n    // item.\n    __EXTEND_POINT__: 17\n};\n/** @internal */\nconst errorMessages = {\n    // tokenizer error messages\n    [CompileErrorCodes.EXPECTED_TOKEN]: `Expected token: '{0}'`,\n    [CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER]: `Invalid token in placeholder: '{0}'`,\n    [CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER]: `Unterminated single quote in placeholder`,\n    [CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE]: `Unknown escape sequence: \\\\{0}`,\n    [CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE]: `Invalid unicode escape sequence: {0}`,\n    [CompileErrorCodes.UNBALANCED_CLOSING_BRACE]: `Unbalanced closing brace`,\n    [CompileErrorCodes.UNTERMINATED_CLOSING_BRACE]: `Unterminated closing brace`,\n    [CompileErrorCodes.EMPTY_PLACEHOLDER]: `Empty placeholder`,\n    [CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER]: `Not allowed nest placeholder`,\n    [CompileErrorCodes.INVALID_LINKED_FORMAT]: `Invalid linked format`,\n    // parser error messages\n    [CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL]: `Plural must have messages`,\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER]: `Unexpected empty linked modifier`,\n    [CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY]: `Unexpected empty linked key`,\n    [CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS]: `Unexpected lexical analysis in token: '{0}'`,\n    // generator error messages\n    [CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE]: `unhandled codegen node type: '{0}'`,\n    // minimizer error messages\n    [CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE]: `unhandled mimifier node type: '{0}'`\n};\nfunction createCompileError(code, loc, options = {}) {\n    const { domain, messages, args } = options;\n    const msg = format((messages || errorMessages)[code] || '', ...(args || []))\n        ;\n    const error = new SyntaxError(String(msg));\n    error.code = code;\n    if (loc) {\n        error.location = loc;\n    }\n    error.domain = domain;\n    return error;\n}\n/** @internal */\nfunction defaultOnError(error) {\n    throw error;\n}\n\n// eslint-disable-next-line no-useless-escape\nconst RE_HTML_TAG = /<\\/?[\\w\\s=\"/.':;#-\\/]+>/;\nconst detectHtmlTag = (source) => RE_HTML_TAG.test(source);\n\nconst CHAR_SP = ' ';\nconst CHAR_CR = '\\r';\nconst CHAR_LF = '\\n';\nconst CHAR_LS = String.fromCharCode(0x2028);\nconst CHAR_PS = String.fromCharCode(0x2029);\nfunction createScanner(str) {\n    const _buf = str;\n    let _index = 0;\n    let _line = 1;\n    let _column = 1;\n    let _peekOffset = 0;\n    const isCRLF = (index) => _buf[index] === CHAR_CR && _buf[index + 1] === CHAR_LF;\n    const isLF = (index) => _buf[index] === CHAR_LF;\n    const isPS = (index) => _buf[index] === CHAR_PS;\n    const isLS = (index) => _buf[index] === CHAR_LS;\n    const isLineEnd = (index) => isCRLF(index) || isLF(index) || isPS(index) || isLS(index);\n    const index = () => _index;\n    const line = () => _line;\n    const column = () => _column;\n    const peekOffset = () => _peekOffset;\n    const charAt = (offset) => isCRLF(offset) || isPS(offset) || isLS(offset) ? CHAR_LF : _buf[offset];\n    const currentChar = () => charAt(_index);\n    const currentPeek = () => charAt(_index + _peekOffset);\n    function next() {\n        _peekOffset = 0;\n        if (isLineEnd(_index)) {\n            _line++;\n            _column = 0;\n        }\n        if (isCRLF(_index)) {\n            _index++;\n        }\n        _index++;\n        _column++;\n        return _buf[_index];\n    }\n    function peek() {\n        if (isCRLF(_index + _peekOffset)) {\n            _peekOffset++;\n        }\n        _peekOffset++;\n        return _buf[_index + _peekOffset];\n    }\n    function reset() {\n        _index = 0;\n        _line = 1;\n        _column = 1;\n        _peekOffset = 0;\n    }\n    function resetPeek(offset = 0) {\n        _peekOffset = offset;\n    }\n    function skipToPeek() {\n        const target = _index + _peekOffset;\n        // eslint-disable-next-line no-unmodified-loop-condition\n        while (target !== _index) {\n            next();\n        }\n        _peekOffset = 0;\n    }\n    return {\n        index,\n        line,\n        column,\n        peekOffset,\n        charAt,\n        currentChar,\n        currentPeek,\n        next,\n        peek,\n        reset,\n        resetPeek,\n        skipToPeek\n    };\n}\n\nconst EOF = undefined;\nconst DOT = '.';\nconst LITERAL_DELIMITER = \"'\";\nconst ERROR_DOMAIN$3 = 'tokenizer';\nfunction createTokenizer(source, options = {}) {\n    const location = options.location !== false;\n    const _scnr = createScanner(source);\n    const currentOffset = () => _scnr.index();\n    const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());\n    const _initLoc = currentPosition();\n    const _initOffset = currentOffset();\n    const _context = {\n        currentType: 14 /* TokenTypes.EOF */,\n        offset: _initOffset,\n        startLoc: _initLoc,\n        endLoc: _initLoc,\n        lastType: 14 /* TokenTypes.EOF */,\n        lastOffset: _initOffset,\n        lastStartLoc: _initLoc,\n        lastEndLoc: _initLoc,\n        braceNest: 0,\n        inLinked: false,\n        text: ''\n    };\n    const context = () => _context;\n    const { onError } = options;\n    function emitError(code, pos, offset, ...args) {\n        const ctx = context();\n        pos.column += offset;\n        pos.offset += offset;\n        if (onError) {\n            const loc = location ? createLocation(ctx.startLoc, pos) : null;\n            const err = createCompileError(code, loc, {\n                domain: ERROR_DOMAIN$3,\n                args\n            });\n            onError(err);\n        }\n    }\n    function getToken(context, type, value) {\n        context.endLoc = currentPosition();\n        context.currentType = type;\n        const token = { type };\n        if (location) {\n            token.loc = createLocation(context.startLoc, context.endLoc);\n        }\n        if (value != null) {\n            token.value = value;\n        }\n        return token;\n    }\n    const getEndToken = (context) => getToken(context, 14 /* TokenTypes.EOF */);\n    function eat(scnr, ch) {\n        if (scnr.currentChar() === ch) {\n            scnr.next();\n            return ch;\n        }\n        else {\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n            return '';\n        }\n    }\n    function peekSpaces(scnr) {\n        let buf = '';\n        while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {\n            buf += scnr.currentPeek();\n            scnr.peek();\n        }\n        return buf;\n    }\n    function skipSpaces(scnr) {\n        const buf = peekSpaces(scnr);\n        scnr.skipToPeek();\n        return buf;\n    }\n    function isIdentifierStart(ch) {\n        if (ch === EOF) {\n            return false;\n        }\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            cc === 95 // _\n        );\n    }\n    function isNumberStart(ch) {\n        if (ch === EOF) {\n            return false;\n        }\n        const cc = ch.charCodeAt(0);\n        return cc >= 48 && cc <= 57; // 0-9\n    }\n    function isNamedIdentifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = isIdentifierStart(scnr.currentPeek());\n        scnr.resetPeek();\n        return ret;\n    }\n    function isListIdentifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ch = scnr.currentPeek() === '-' ? scnr.peek() : scnr.currentPeek();\n        const ret = isNumberStart(ch);\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLiteralStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 2 /* TokenTypes.BraceLeft */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === LITERAL_DELIMITER;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedDotStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 8 /* TokenTypes.LinkedAlias */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \".\" /* TokenChars.LinkedDot */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedModifierStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 9 /* TokenTypes.LinkedDot */) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = isIdentifierStart(scnr.currentPeek());\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedDelimiterStart(scnr, context) {\n        const { currentType } = context;\n        if (!(currentType === 8 /* TokenTypes.LinkedAlias */ ||\n            currentType === 12 /* TokenTypes.LinkedModifier */)) {\n            return false;\n        }\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \":\" /* TokenChars.LinkedDelimiter */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function isLinkedReferStart(scnr, context) {\n        const { currentType } = context;\n        if (currentType !== 10 /* TokenTypes.LinkedDelimiter */) {\n            return false;\n        }\n        const fn = () => {\n            const ch = scnr.currentPeek();\n            if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                return isIdentifierStart(scnr.peek());\n            }\n            else if (ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"%\" /* TokenChars.Modulo */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                ch === \":\" /* TokenChars.LinkedDelimiter */ ||\n                ch === \".\" /* TokenChars.LinkedDot */ ||\n                ch === CHAR_SP ||\n                !ch) {\n                return false;\n            }\n            else if (ch === CHAR_LF) {\n                scnr.peek();\n                return fn();\n            }\n            else {\n                // other characters\n                return isTextStart(scnr, false);\n            }\n        };\n        const ret = fn();\n        scnr.resetPeek();\n        return ret;\n    }\n    function isPluralStart(scnr) {\n        peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \"|\" /* TokenChars.Pipe */;\n        scnr.resetPeek();\n        return ret;\n    }\n    function detectModuloStart(scnr) {\n        const spaces = peekSpaces(scnr);\n        const ret = scnr.currentPeek() === \"%\" /* TokenChars.Modulo */ &&\n            scnr.peek() === \"{\" /* TokenChars.BraceLeft */;\n        scnr.resetPeek();\n        return {\n            isModulo: ret,\n            hasSpace: spaces.length > 0\n        };\n    }\n    function isTextStart(scnr, reset = true) {\n        const fn = (hasSpace = false, prev = '', detectModulo = false) => {\n            const ch = scnr.currentPeek();\n            if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                return prev === \"%\" /* TokenChars.Modulo */ ? false : hasSpace;\n            }\n            else if (ch === \"@\" /* TokenChars.LinkedAlias */ || !ch) {\n                return prev === \"%\" /* TokenChars.Modulo */ ? true : hasSpace;\n            }\n            else if (ch === \"%\" /* TokenChars.Modulo */) {\n                scnr.peek();\n                return fn(hasSpace, \"%\" /* TokenChars.Modulo */, true);\n            }\n            else if (ch === \"|\" /* TokenChars.Pipe */) {\n                return prev === \"%\" /* TokenChars.Modulo */ || detectModulo\n                    ? true\n                    : !(prev === CHAR_SP || prev === CHAR_LF);\n            }\n            else if (ch === CHAR_SP) {\n                scnr.peek();\n                return fn(true, CHAR_SP, detectModulo);\n            }\n            else if (ch === CHAR_LF) {\n                scnr.peek();\n                return fn(true, CHAR_LF, detectModulo);\n            }\n            else {\n                return true;\n            }\n        };\n        const ret = fn();\n        reset && scnr.resetPeek();\n        return ret;\n    }\n    function takeChar(scnr, fn) {\n        const ch = scnr.currentChar();\n        if (ch === EOF) {\n            return EOF;\n        }\n        if (fn(ch)) {\n            scnr.next();\n            return ch;\n        }\n        return null;\n    }\n    function isIdentifier(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            (cc >= 48 && cc <= 57) || // 0-9\n            cc === 95 || // _\n            cc === 36 // $\n        );\n    }\n    function takeIdentifierChar(scnr) {\n        return takeChar(scnr, isIdentifier);\n    }\n    function isNamedIdentifier(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 97 && cc <= 122) || // a-z\n            (cc >= 65 && cc <= 90) || // A-Z\n            (cc >= 48 && cc <= 57) || // 0-9\n            cc === 95 || // _\n            cc === 36 || // $\n            cc === 45 // -\n        );\n    }\n    function takeNamedIdentifierChar(scnr) {\n        return takeChar(scnr, isNamedIdentifier);\n    }\n    function isDigit(ch) {\n        const cc = ch.charCodeAt(0);\n        return cc >= 48 && cc <= 57; // 0-9\n    }\n    function takeDigit(scnr) {\n        return takeChar(scnr, isDigit);\n    }\n    function isHexDigit(ch) {\n        const cc = ch.charCodeAt(0);\n        return ((cc >= 48 && cc <= 57) || // 0-9\n            (cc >= 65 && cc <= 70) || // A-F\n            (cc >= 97 && cc <= 102)); // a-f\n    }\n    function takeHexDigit(scnr) {\n        return takeChar(scnr, isHexDigit);\n    }\n    function getDigits(scnr) {\n        let ch = '';\n        let num = '';\n        while ((ch = takeDigit(scnr))) {\n            num += ch;\n        }\n        return num;\n    }\n    function readModulo(scnr) {\n        skipSpaces(scnr);\n        const ch = scnr.currentChar();\n        if (ch !== \"%\" /* TokenChars.Modulo */) {\n            emitError(CompileErrorCodes.EXPECTED_TOKEN, currentPosition(), 0, ch);\n        }\n        scnr.next();\n        return \"%\" /* TokenChars.Modulo */;\n    }\n    function readText(scnr) {\n        let buf = '';\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const ch = scnr.currentChar();\n            if (ch === \"{\" /* TokenChars.BraceLeft */ ||\n                ch === \"}\" /* TokenChars.BraceRight */ ||\n                ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                !ch) {\n                break;\n            }\n            else if (ch === \"%\" /* TokenChars.Modulo */) {\n                if (isTextStart(scnr)) {\n                    buf += ch;\n                    scnr.next();\n                }\n                else {\n                    break;\n                }\n            }\n            else if (ch === CHAR_SP || ch === CHAR_LF) {\n                if (isTextStart(scnr)) {\n                    buf += ch;\n                    scnr.next();\n                }\n                else if (isPluralStart(scnr)) {\n                    break;\n                }\n                else {\n                    buf += ch;\n                    scnr.next();\n                }\n            }\n            else {\n                buf += ch;\n                scnr.next();\n            }\n        }\n        return buf;\n    }\n    function readNamedIdentifier(scnr) {\n        skipSpaces(scnr);\n        let ch = '';\n        let name = '';\n        while ((ch = takeNamedIdentifierChar(scnr))) {\n            name += ch;\n        }\n        if (scnr.currentChar() === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        return name;\n    }\n    function readListIdentifier(scnr) {\n        skipSpaces(scnr);\n        let value = '';\n        if (scnr.currentChar() === '-') {\n            scnr.next();\n            value += `-${getDigits(scnr)}`;\n        }\n        else {\n            value += getDigits(scnr);\n        }\n        if (scnr.currentChar() === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n        }\n        return value;\n    }\n    function isLiteral(ch) {\n        return ch !== LITERAL_DELIMITER && ch !== CHAR_LF;\n    }\n    function readLiteral(scnr) {\n        skipSpaces(scnr);\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n        let ch = '';\n        let literal = '';\n        while ((ch = takeChar(scnr, isLiteral))) {\n            if (ch === '\\\\') {\n                literal += readEscapeSequence(scnr);\n            }\n            else {\n                literal += ch;\n            }\n        }\n        const current = scnr.currentChar();\n        if (current === CHAR_LF || current === EOF) {\n            emitError(CompileErrorCodes.UNTERMINATED_SINGLE_QUOTE_IN_PLACEHOLDER, currentPosition(), 0);\n            // TODO: Is it correct really?\n            if (current === CHAR_LF) {\n                scnr.next();\n                // eslint-disable-next-line no-useless-escape\n                eat(scnr, `\\'`);\n            }\n            return literal;\n        }\n        // eslint-disable-next-line no-useless-escape\n        eat(scnr, `\\'`);\n        return literal;\n    }\n    function readEscapeSequence(scnr) {\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case '\\\\':\n            case `\\'`: // eslint-disable-line no-useless-escape\n                scnr.next();\n                return `\\\\${ch}`;\n            case 'u':\n                return readUnicodeEscapeSequence(scnr, ch, 4);\n            case 'U':\n                return readUnicodeEscapeSequence(scnr, ch, 6);\n            default:\n                emitError(CompileErrorCodes.UNKNOWN_ESCAPE_SEQUENCE, currentPosition(), 0, ch);\n                return '';\n        }\n    }\n    function readUnicodeEscapeSequence(scnr, unicode, digits) {\n        eat(scnr, unicode);\n        let sequence = '';\n        for (let i = 0; i < digits; i++) {\n            const ch = takeHexDigit(scnr);\n            if (!ch) {\n                emitError(CompileErrorCodes.INVALID_UNICODE_ESCAPE_SEQUENCE, currentPosition(), 0, `\\\\${unicode}${sequence}${scnr.currentChar()}`);\n                break;\n            }\n            sequence += ch;\n        }\n        return `\\\\${unicode}${sequence}`;\n    }\n    function isInvalidIdentifier(ch) {\n        return (ch !== \"{\" /* TokenChars.BraceLeft */ &&\n            ch !== \"}\" /* TokenChars.BraceRight */ &&\n            ch !== CHAR_SP &&\n            ch !== CHAR_LF);\n    }\n    function readInvalidIdentifier(scnr) {\n        skipSpaces(scnr);\n        let ch = '';\n        let identifiers = '';\n        while ((ch = takeChar(scnr, isInvalidIdentifier))) {\n            identifiers += ch;\n        }\n        return identifiers;\n    }\n    function readLinkedModifier(scnr) {\n        let ch = '';\n        let name = '';\n        while ((ch = takeIdentifierChar(scnr))) {\n            name += ch;\n        }\n        return name;\n    }\n    function readLinkedRefer(scnr) {\n        const fn = (buf) => {\n            const ch = scnr.currentChar();\n            if (ch === \"{\" /* TokenChars.BraceLeft */ ||\n                ch === \"%\" /* TokenChars.Modulo */ ||\n                ch === \"@\" /* TokenChars.LinkedAlias */ ||\n                ch === \"|\" /* TokenChars.Pipe */ ||\n                ch === \"(\" /* TokenChars.ParenLeft */ ||\n                ch === \")\" /* TokenChars.ParenRight */ ||\n                !ch) {\n                return buf;\n            }\n            else if (ch === CHAR_SP) {\n                return buf;\n            }\n            else if (ch === CHAR_LF || ch === DOT) {\n                buf += ch;\n                scnr.next();\n                return fn(buf);\n            }\n            else {\n                buf += ch;\n                scnr.next();\n                return fn(buf);\n            }\n        };\n        return fn('');\n    }\n    function readPlural(scnr) {\n        skipSpaces(scnr);\n        const plural = eat(scnr, \"|\" /* TokenChars.Pipe */);\n        skipSpaces(scnr);\n        return plural;\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readTokenInPlaceholder(scnr, context) {\n        let token = null;\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case \"{\" /* TokenChars.BraceLeft */:\n                if (context.braceNest >= 1) {\n                    emitError(CompileErrorCodes.NOT_ALLOW_NEST_PLACEHOLDER, currentPosition(), 0);\n                }\n                scnr.next();\n                token = getToken(context, 2 /* TokenTypes.BraceLeft */, \"{\" /* TokenChars.BraceLeft */);\n                skipSpaces(scnr);\n                context.braceNest++;\n                return token;\n            case \"}\" /* TokenChars.BraceRight */:\n                if (context.braceNest > 0 &&\n                    context.currentType === 2 /* TokenTypes.BraceLeft */) {\n                    emitError(CompileErrorCodes.EMPTY_PLACEHOLDER, currentPosition(), 0);\n                }\n                scnr.next();\n                token = getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n                context.braceNest--;\n                context.braceNest > 0 && skipSpaces(scnr);\n                if (context.inLinked && context.braceNest === 0) {\n                    context.inLinked = false;\n                }\n                return token;\n            case \"@\" /* TokenChars.LinkedAlias */:\n                if (context.braceNest > 0) {\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                }\n                token = readTokenInLinked(scnr, context) || getEndToken(context);\n                context.braceNest = 0;\n                return token;\n            default: {\n                let validNamedIdentifier = true;\n                let validListIdentifier = true;\n                let validLiteral = true;\n                if (isPluralStart(scnr)) {\n                    if (context.braceNest > 0) {\n                        emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                    }\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (context.braceNest > 0 &&\n                    (context.currentType === 5 /* TokenTypes.Named */ ||\n                        context.currentType === 6 /* TokenTypes.List */ ||\n                        context.currentType === 7 /* TokenTypes.Literal */)) {\n                    emitError(CompileErrorCodes.UNTERMINATED_CLOSING_BRACE, currentPosition(), 0);\n                    context.braceNest = 0;\n                    return readToken(scnr, context);\n                }\n                if ((validNamedIdentifier = isNamedIdentifierStart(scnr, context))) {\n                    token = getToken(context, 5 /* TokenTypes.Named */, readNamedIdentifier(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if ((validListIdentifier = isListIdentifierStart(scnr, context))) {\n                    token = getToken(context, 6 /* TokenTypes.List */, readListIdentifier(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if ((validLiteral = isLiteralStart(scnr, context))) {\n                    token = getToken(context, 7 /* TokenTypes.Literal */, readLiteral(scnr));\n                    skipSpaces(scnr);\n                    return token;\n                }\n                if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {\n                    // TODO: we should be re-designed invalid cases, when we will extend message syntax near the future ...\n                    token = getToken(context, 13 /* TokenTypes.InvalidPlace */, readInvalidIdentifier(scnr));\n                    emitError(CompileErrorCodes.INVALID_TOKEN_IN_PLACEHOLDER, currentPosition(), 0, token.value);\n                    skipSpaces(scnr);\n                    return token;\n                }\n                break;\n            }\n        }\n        return token;\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readTokenInLinked(scnr, context) {\n        const { currentType } = context;\n        let token = null;\n        const ch = scnr.currentChar();\n        if ((currentType === 8 /* TokenTypes.LinkedAlias */ ||\n            currentType === 9 /* TokenTypes.LinkedDot */ ||\n            currentType === 12 /* TokenTypes.LinkedModifier */ ||\n            currentType === 10 /* TokenTypes.LinkedDelimiter */) &&\n            (ch === CHAR_LF || ch === CHAR_SP)) {\n            emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n        }\n        switch (ch) {\n            case \"@\" /* TokenChars.LinkedAlias */:\n                scnr.next();\n                token = getToken(context, 8 /* TokenTypes.LinkedAlias */, \"@\" /* TokenChars.LinkedAlias */);\n                context.inLinked = true;\n                return token;\n            case \".\" /* TokenChars.LinkedDot */:\n                skipSpaces(scnr);\n                scnr.next();\n                return getToken(context, 9 /* TokenTypes.LinkedDot */, \".\" /* TokenChars.LinkedDot */);\n            case \":\" /* TokenChars.LinkedDelimiter */:\n                skipSpaces(scnr);\n                scnr.next();\n                return getToken(context, 10 /* TokenTypes.LinkedDelimiter */, \":\" /* TokenChars.LinkedDelimiter */);\n            default:\n                if (isPluralStart(scnr)) {\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                if (isLinkedDotStart(scnr, context) ||\n                    isLinkedDelimiterStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    return readTokenInLinked(scnr, context);\n                }\n                if (isLinkedModifierStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    return getToken(context, 12 /* TokenTypes.LinkedModifier */, readLinkedModifier(scnr));\n                }\n                if (isLinkedReferStart(scnr, context)) {\n                    skipSpaces(scnr);\n                    if (ch === \"{\" /* TokenChars.BraceLeft */) {\n                        // scan the placeholder\n                        return readTokenInPlaceholder(scnr, context) || token;\n                    }\n                    else {\n                        return getToken(context, 11 /* TokenTypes.LinkedKey */, readLinkedRefer(scnr));\n                    }\n                }\n                if (currentType === 8 /* TokenTypes.LinkedAlias */) {\n                    emitError(CompileErrorCodes.INVALID_LINKED_FORMAT, currentPosition(), 0);\n                }\n                context.braceNest = 0;\n                context.inLinked = false;\n                return readToken(scnr, context);\n        }\n    }\n    // TODO: We need refactoring of token parsing ...\n    function readToken(scnr, context) {\n        let token = { type: 14 /* TokenTypes.EOF */ };\n        if (context.braceNest > 0) {\n            return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n        }\n        if (context.inLinked) {\n            return readTokenInLinked(scnr, context) || getEndToken(context);\n        }\n        const ch = scnr.currentChar();\n        switch (ch) {\n            case \"{\" /* TokenChars.BraceLeft */:\n                return readTokenInPlaceholder(scnr, context) || getEndToken(context);\n            case \"}\" /* TokenChars.BraceRight */:\n                emitError(CompileErrorCodes.UNBALANCED_CLOSING_BRACE, currentPosition(), 0);\n                scnr.next();\n                return getToken(context, 3 /* TokenTypes.BraceRight */, \"}\" /* TokenChars.BraceRight */);\n            case \"@\" /* TokenChars.LinkedAlias */:\n                return readTokenInLinked(scnr, context) || getEndToken(context);\n            default: {\n                if (isPluralStart(scnr)) {\n                    token = getToken(context, 1 /* TokenTypes.Pipe */, readPlural(scnr));\n                    // reset\n                    context.braceNest = 0;\n                    context.inLinked = false;\n                    return token;\n                }\n                const { isModulo, hasSpace } = detectModuloStart(scnr);\n                if (isModulo) {\n                    return hasSpace\n                        ? getToken(context, 0 /* TokenTypes.Text */, readText(scnr))\n                        : getToken(context, 4 /* TokenTypes.Modulo */, readModulo(scnr));\n                }\n                if (isTextStart(scnr)) {\n                    return getToken(context, 0 /* TokenTypes.Text */, readText(scnr));\n                }\n                break;\n            }\n        }\n        return token;\n    }\n    function nextToken() {\n        const { currentType, offset, startLoc, endLoc } = _context;\n        _context.lastType = currentType;\n        _context.lastOffset = offset;\n        _context.lastStartLoc = startLoc;\n        _context.lastEndLoc = endLoc;\n        _context.offset = currentOffset();\n        _context.startLoc = currentPosition();\n        if (_scnr.currentChar() === EOF) {\n            return getToken(_context, 14 /* TokenTypes.EOF */);\n        }\n        return readToken(_scnr, _context);\n    }\n    return {\n        nextToken,\n        currentOffset,\n        currentPosition,\n        context\n    };\n}\n\nconst ERROR_DOMAIN$2 = 'parser';\n// Backslash backslash, backslash quote, uHHHH, UHHHHHH.\nconst KNOWN_ESCAPES = /(?:\\\\\\\\|\\\\'|\\\\u([0-9a-fA-F]{4})|\\\\U([0-9a-fA-F]{6}))/g;\nfunction fromEscapeSequence(match, codePoint4, codePoint6) {\n    switch (match) {\n        case `\\\\\\\\`:\n            return `\\\\`;\n        // eslint-disable-next-line no-useless-escape\n        case `\\\\\\'`:\n            // eslint-disable-next-line no-useless-escape\n            return `\\'`;\n        default: {\n            const codePoint = parseInt(codePoint4 || codePoint6, 16);\n            if (codePoint <= 0xd7ff || codePoint >= 0xe000) {\n                return String.fromCodePoint(codePoint);\n            }\n            // invalid ...\n            // Replace them with U+FFFD REPLACEMENT CHARACTER.\n            return '�';\n        }\n    }\n}\nfunction createParser(options = {}) {\n    const location = options.location !== false;\n    const { onError, onWarn } = options;\n    function emitError(tokenzer, code, start, offset, ...args) {\n        const end = tokenzer.currentPosition();\n        end.offset += offset;\n        end.column += offset;\n        if (onError) {\n            const loc = location ? createLocation(start, end) : null;\n            const err = createCompileError(code, loc, {\n                domain: ERROR_DOMAIN$2,\n                args\n            });\n            onError(err);\n        }\n    }\n    function emitWarn(tokenzer, code, start, offset, ...args) {\n        const end = tokenzer.currentPosition();\n        end.offset += offset;\n        end.column += offset;\n        if (onWarn) {\n            const loc = location ? createLocation(start, end) : null;\n            onWarn(createCompileWarn(code, loc, args));\n        }\n    }\n    function startNode(type, offset, loc) {\n        const node = { type };\n        if (location) {\n            node.start = offset;\n            node.end = offset;\n            node.loc = { start: loc, end: loc };\n        }\n        return node;\n    }\n    function endNode(node, offset, pos, type) {\n        if (type) {\n            node.type = type;\n        }\n        if (location) {\n            node.end = offset;\n            if (node.loc) {\n                node.loc.end = pos;\n            }\n        }\n    }\n    function parseText(tokenizer, value) {\n        const context = tokenizer.context();\n        const node = startNode(3 /* NodeTypes.Text */, context.offset, context.startLoc);\n        node.value = value;\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseList(tokenizer, index) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(5 /* NodeTypes.List */, offset, loc);\n        node.index = parseInt(index, 10);\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseNamed(tokenizer, key, modulo) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(4 /* NodeTypes.Named */, offset, loc);\n        node.key = key;\n        if (modulo === true) {\n            node.modulo = true;\n        }\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLiteral(tokenizer, value) {\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get brace left loc\n        const node = startNode(9 /* NodeTypes.Literal */, offset, loc);\n        node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);\n        tokenizer.nextToken(); // skip brach right\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLinkedModifier(tokenizer) {\n        const token = tokenizer.nextToken();\n        const context = tokenizer.context();\n        const { lastOffset: offset, lastStartLoc: loc } = context; // get linked dot loc\n        const node = startNode(8 /* NodeTypes.LinkedModifier */, offset, loc);\n        if (token.type !== 12 /* TokenTypes.LinkedModifier */) {\n            // empty modifier\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_MODIFIER, context.lastStartLoc, 0);\n            node.value = '';\n            endNode(node, offset, loc);\n            return {\n                nextConsumeToken: token,\n                node\n            };\n        }\n        // check token\n        if (token.value == null) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        node.value = token.value || '';\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return {\n            node\n        };\n    }\n    function parseLinkedKey(tokenizer, value) {\n        const context = tokenizer.context();\n        const node = startNode(7 /* NodeTypes.LinkedKey */, context.offset, context.startLoc);\n        node.value = value;\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseLinked(tokenizer) {\n        const context = tokenizer.context();\n        const linkedNode = startNode(6 /* NodeTypes.Linked */, context.offset, context.startLoc);\n        let token = tokenizer.nextToken();\n        if (token.type === 9 /* TokenTypes.LinkedDot */) {\n            const parsed = parseLinkedModifier(tokenizer);\n            linkedNode.modifier = parsed.node;\n            token = parsed.nextConsumeToken || tokenizer.nextToken();\n        }\n        // asset check token\n        if (token.type !== 10 /* TokenTypes.LinkedDelimiter */) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n        }\n        token = tokenizer.nextToken();\n        // skip brace left\n        if (token.type === 2 /* TokenTypes.BraceLeft */) {\n            token = tokenizer.nextToken();\n        }\n        switch (token.type) {\n            case 11 /* TokenTypes.LinkedKey */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseLinkedKey(tokenizer, token.value || '');\n                break;\n            case 5 /* TokenTypes.Named */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseNamed(tokenizer, token.value || '');\n                break;\n            case 6 /* TokenTypes.List */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseList(tokenizer, token.value || '');\n                break;\n            case 7 /* TokenTypes.Literal */:\n                if (token.value == null) {\n                    emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                }\n                linkedNode.key = parseLiteral(tokenizer, token.value || '');\n                break;\n            default: {\n                // empty key\n                emitError(tokenizer, CompileErrorCodes.UNEXPECTED_EMPTY_LINKED_KEY, context.lastStartLoc, 0);\n                const nextContext = tokenizer.context();\n                const emptyLinkedKeyNode = startNode(7 /* NodeTypes.LinkedKey */, nextContext.offset, nextContext.startLoc);\n                emptyLinkedKeyNode.value = '';\n                endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);\n                linkedNode.key = emptyLinkedKeyNode;\n                endNode(linkedNode, nextContext.offset, nextContext.startLoc);\n                return {\n                    nextConsumeToken: token,\n                    node: linkedNode\n                };\n            }\n        }\n        endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return {\n            node: linkedNode\n        };\n    }\n    function parseMessage(tokenizer) {\n        const context = tokenizer.context();\n        const startOffset = context.currentType === 1 /* TokenTypes.Pipe */\n            ? tokenizer.currentOffset()\n            : context.offset;\n        const startLoc = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.endLoc\n            : context.startLoc;\n        const node = startNode(2 /* NodeTypes.Message */, startOffset, startLoc);\n        node.items = [];\n        let nextToken = null;\n        let modulo = null;\n        do {\n            const token = nextToken || tokenizer.nextToken();\n            nextToken = null;\n            switch (token.type) {\n                case 0 /* TokenTypes.Text */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseText(tokenizer, token.value || ''));\n                    break;\n                case 6 /* TokenTypes.List */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseList(tokenizer, token.value || ''));\n                    break;\n                case 4 /* TokenTypes.Modulo */:\n                    modulo = true;\n                    break;\n                case 5 /* TokenTypes.Named */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseNamed(tokenizer, token.value || '', !!modulo));\n                    if (modulo) {\n                        emitWarn(tokenizer, CompileWarnCodes.USE_MODULO_SYNTAX, context.lastStartLoc, 0, getTokenCaption(token));\n                        modulo = null;\n                    }\n                    break;\n                case 7 /* TokenTypes.Literal */:\n                    if (token.value == null) {\n                        emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, getTokenCaption(token));\n                    }\n                    node.items.push(parseLiteral(tokenizer, token.value || ''));\n                    break;\n                case 8 /* TokenTypes.LinkedAlias */: {\n                    const parsed = parseLinked(tokenizer);\n                    node.items.push(parsed.node);\n                    nextToken = parsed.nextConsumeToken || null;\n                    break;\n                }\n            }\n        } while (context.currentType !== 14 /* TokenTypes.EOF */ &&\n            context.currentType !== 1 /* TokenTypes.Pipe */);\n        // adjust message node loc\n        const endOffset = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.lastOffset\n            : tokenizer.currentOffset();\n        const endLoc = context.currentType === 1 /* TokenTypes.Pipe */\n            ? context.lastEndLoc\n            : tokenizer.currentPosition();\n        endNode(node, endOffset, endLoc);\n        return node;\n    }\n    function parsePlural(tokenizer, offset, loc, msgNode) {\n        const context = tokenizer.context();\n        let hasEmptyMessage = msgNode.items.length === 0;\n        const node = startNode(1 /* NodeTypes.Plural */, offset, loc);\n        node.cases = [];\n        node.cases.push(msgNode);\n        do {\n            const msg = parseMessage(tokenizer);\n            if (!hasEmptyMessage) {\n                hasEmptyMessage = msg.items.length === 0;\n            }\n            node.cases.push(msg);\n        } while (context.currentType !== 14 /* TokenTypes.EOF */);\n        if (hasEmptyMessage) {\n            emitError(tokenizer, CompileErrorCodes.MUST_HAVE_MESSAGES_IN_PLURAL, loc, 0);\n        }\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    function parseResource(tokenizer) {\n        const context = tokenizer.context();\n        const { offset, startLoc } = context;\n        const msgNode = parseMessage(tokenizer);\n        if (context.currentType === 14 /* TokenTypes.EOF */) {\n            return msgNode;\n        }\n        else {\n            return parsePlural(tokenizer, offset, startLoc, msgNode);\n        }\n    }\n    function parse(source) {\n        const tokenizer = createTokenizer(source, assign({}, options));\n        const context = tokenizer.context();\n        const node = startNode(0 /* NodeTypes.Resource */, context.offset, context.startLoc);\n        if (location && node.loc) {\n            node.loc.source = source;\n        }\n        node.body = parseResource(tokenizer);\n        if (options.onCacheKey) {\n            node.cacheKey = options.onCacheKey(source);\n        }\n        // assert whether achieved to EOF\n        if (context.currentType !== 14 /* TokenTypes.EOF */) {\n            emitError(tokenizer, CompileErrorCodes.UNEXPECTED_LEXICAL_ANALYSIS, context.lastStartLoc, 0, source[context.offset] || '');\n        }\n        endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());\n        return node;\n    }\n    return { parse };\n}\nfunction getTokenCaption(token) {\n    if (token.type === 14 /* TokenTypes.EOF */) {\n        return 'EOF';\n    }\n    const name = (token.value || '').replace(/\\r?\\n/gu, '\\\\n');\n    return name.length > 10 ? name.slice(0, 9) + '…' : name;\n}\n\nfunction createTransformer(ast, options = {} // eslint-disable-line\n) {\n    const _context = {\n        ast,\n        helpers: new Set()\n    };\n    const context = () => _context;\n    const helper = (name) => {\n        _context.helpers.add(name);\n        return name;\n    };\n    return { context, helper };\n}\nfunction traverseNodes(nodes, transformer) {\n    for (let i = 0; i < nodes.length; i++) {\n        traverseNode(nodes[i], transformer);\n    }\n}\nfunction traverseNode(node, transformer) {\n    // TODO: if we need pre-hook of transform, should be implemented to here\n    switch (node.type) {\n        case 1 /* NodeTypes.Plural */:\n            traverseNodes(node.cases, transformer);\n            transformer.helper(\"plural\" /* HelperNameMap.PLURAL */);\n            break;\n        case 2 /* NodeTypes.Message */:\n            traverseNodes(node.items, transformer);\n            break;\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            traverseNode(linked.key, transformer);\n            transformer.helper(\"linked\" /* HelperNameMap.LINKED */);\n            transformer.helper(\"type\" /* HelperNameMap.TYPE */);\n            break;\n        }\n        case 5 /* NodeTypes.List */:\n            transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n            transformer.helper(\"list\" /* HelperNameMap.LIST */);\n            break;\n        case 4 /* NodeTypes.Named */:\n            transformer.helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */);\n            transformer.helper(\"named\" /* HelperNameMap.NAMED */);\n            break;\n    }\n    // TODO: if we need post-hook of transform, should be implemented to here\n}\n// transform AST\nfunction transform(ast, options = {} // eslint-disable-line\n) {\n    const transformer = createTransformer(ast);\n    transformer.helper(\"normalize\" /* HelperNameMap.NORMALIZE */);\n    // traverse\n    ast.body && traverseNode(ast.body, transformer);\n    // set meta information\n    const context = transformer.context();\n    ast.helpers = Array.from(context.helpers);\n}\n\nfunction optimize(ast) {\n    const body = ast.body;\n    if (body.type === 2 /* NodeTypes.Message */) {\n        optimizeMessageNode(body);\n    }\n    else {\n        body.cases.forEach(c => optimizeMessageNode(c));\n    }\n    return ast;\n}\nfunction optimizeMessageNode(message) {\n    if (message.items.length === 1) {\n        const item = message.items[0];\n        if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n            message.static = item.value;\n            delete item.value; // optimization for size\n        }\n    }\n    else {\n        const values = [];\n        for (let i = 0; i < message.items.length; i++) {\n            const item = message.items[i];\n            if (!(item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */)) {\n                break;\n            }\n            if (item.value == null) {\n                break;\n            }\n            values.push(item.value);\n        }\n        if (values.length === message.items.length) {\n            message.static = join(values);\n            for (let i = 0; i < message.items.length; i++) {\n                const item = message.items[i];\n                if (item.type === 3 /* NodeTypes.Text */ || item.type === 9 /* NodeTypes.Literal */) {\n                    delete item.value; // optimization for size\n                }\n            }\n        }\n    }\n}\n\nconst ERROR_DOMAIN$1 = 'minifier';\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction minify(node) {\n    node.t = node.type;\n    switch (node.type) {\n        case 0 /* NodeTypes.Resource */: {\n            const resource = node;\n            minify(resource.body);\n            resource.b = resource.body;\n            delete resource.body;\n            break;\n        }\n        case 1 /* NodeTypes.Plural */: {\n            const plural = node;\n            const cases = plural.cases;\n            for (let i = 0; i < cases.length; i++) {\n                minify(cases[i]);\n            }\n            plural.c = cases;\n            delete plural.cases;\n            break;\n        }\n        case 2 /* NodeTypes.Message */: {\n            const message = node;\n            const items = message.items;\n            for (let i = 0; i < items.length; i++) {\n                minify(items[i]);\n            }\n            message.i = items;\n            delete message.items;\n            if (message.static) {\n                message.s = message.static;\n                delete message.static;\n            }\n            break;\n        }\n        case 3 /* NodeTypes.Text */:\n        case 9 /* NodeTypes.Literal */:\n        case 8 /* NodeTypes.LinkedModifier */:\n        case 7 /* NodeTypes.LinkedKey */: {\n            const valueNode = node;\n            if (valueNode.value) {\n                valueNode.v = valueNode.value;\n                delete valueNode.value;\n            }\n            break;\n        }\n        case 6 /* NodeTypes.Linked */: {\n            const linked = node;\n            minify(linked.key);\n            linked.k = linked.key;\n            delete linked.key;\n            if (linked.modifier) {\n                minify(linked.modifier);\n                linked.m = linked.modifier;\n                delete linked.modifier;\n            }\n            break;\n        }\n        case 5 /* NodeTypes.List */: {\n            const list = node;\n            list.i = list.index;\n            delete list.index;\n            break;\n        }\n        case 4 /* NodeTypes.Named */: {\n            const named = node;\n            named.k = named.key;\n            delete named.key;\n            break;\n        }\n        default:\n            {\n                throw createCompileError(CompileErrorCodes.UNHANDLED_MINIFIER_NODE_TYPE, null, {\n                    domain: ERROR_DOMAIN$1,\n                    args: [node.type]\n                });\n            }\n    }\n    delete node.type;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference types=\"source-map-js\" />\nconst ERROR_DOMAIN = 'parser';\nfunction createCodeGenerator(ast, options) {\n    const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;\n    const location = options.location !== false;\n    const _context = {\n        filename,\n        code: '',\n        column: 1,\n        line: 1,\n        offset: 0,\n        map: undefined,\n        breakLineCode,\n        needIndent: _needIndent,\n        indentLevel: 0\n    };\n    if (location && ast.loc) {\n        _context.source = ast.loc.source;\n    }\n    const context = () => _context;\n    function push(code, node) {\n        _context.code += code;\n    }\n    function _newline(n, withBreakLine = true) {\n        const _breakLineCode = withBreakLine ? breakLineCode : '';\n        push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);\n    }\n    function indent(withNewLine = true) {\n        const level = ++_context.indentLevel;\n        withNewLine && _newline(level);\n    }\n    function deindent(withNewLine = true) {\n        const level = --_context.indentLevel;\n        withNewLine && _newline(level);\n    }\n    function newline() {\n        _newline(_context.indentLevel);\n    }\n    const helper = (key) => `_${key}`;\n    const needIndent = () => _context.needIndent;\n    return {\n        context,\n        push,\n        indent,\n        deindent,\n        newline,\n        helper,\n        needIndent\n    };\n}\nfunction generateLinkedNode(generator, node) {\n    const { helper } = generator;\n    generator.push(`${helper(\"linked\" /* HelperNameMap.LINKED */)}(`);\n    generateNode(generator, node.key);\n    if (node.modifier) {\n        generator.push(`, `);\n        generateNode(generator, node.modifier);\n        generator.push(`, _type`);\n    }\n    else {\n        generator.push(`, undefined, _type`);\n    }\n    generator.push(`)`);\n}\nfunction generateMessageNode(generator, node) {\n    const { helper, needIndent } = generator;\n    generator.push(`${helper(\"normalize\" /* HelperNameMap.NORMALIZE */)}([`);\n    generator.indent(needIndent());\n    const length = node.items.length;\n    for (let i = 0; i < length; i++) {\n        generateNode(generator, node.items[i]);\n        if (i === length - 1) {\n            break;\n        }\n        generator.push(', ');\n    }\n    generator.deindent(needIndent());\n    generator.push('])');\n}\nfunction generatePluralNode(generator, node) {\n    const { helper, needIndent } = generator;\n    if (node.cases.length > 1) {\n        generator.push(`${helper(\"plural\" /* HelperNameMap.PLURAL */)}([`);\n        generator.indent(needIndent());\n        const length = node.cases.length;\n        for (let i = 0; i < length; i++) {\n            generateNode(generator, node.cases[i]);\n            if (i === length - 1) {\n                break;\n            }\n            generator.push(', ');\n        }\n        generator.deindent(needIndent());\n        generator.push(`])`);\n    }\n}\nfunction generateResource(generator, node) {\n    if (node.body) {\n        generateNode(generator, node.body);\n    }\n    else {\n        generator.push('null');\n    }\n}\nfunction generateNode(generator, node) {\n    const { helper } = generator;\n    switch (node.type) {\n        case 0 /* NodeTypes.Resource */:\n            generateResource(generator, node);\n            break;\n        case 1 /* NodeTypes.Plural */:\n            generatePluralNode(generator, node);\n            break;\n        case 2 /* NodeTypes.Message */:\n            generateMessageNode(generator, node);\n            break;\n        case 6 /* NodeTypes.Linked */:\n            generateLinkedNode(generator, node);\n            break;\n        case 8 /* NodeTypes.LinkedModifier */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 7 /* NodeTypes.LinkedKey */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 5 /* NodeTypes.List */:\n            generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"list\" /* HelperNameMap.LIST */)}(${node.index}))`, node);\n            break;\n        case 4 /* NodeTypes.Named */:\n            generator.push(`${helper(\"interpolate\" /* HelperNameMap.INTERPOLATE */)}(${helper(\"named\" /* HelperNameMap.NAMED */)}(${JSON.stringify(node.key)}))`, node);\n            break;\n        case 9 /* NodeTypes.Literal */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        case 3 /* NodeTypes.Text */:\n            generator.push(JSON.stringify(node.value), node);\n            break;\n        default:\n            {\n                throw createCompileError(CompileErrorCodes.UNHANDLED_CODEGEN_NODE_TYPE, null, {\n                    domain: ERROR_DOMAIN,\n                    args: [node.type]\n                });\n            }\n    }\n}\n// generate code from AST\nconst generate = (ast, options = {} // eslint-disable-line\n) => {\n    const mode = isString(options.mode) ? options.mode : 'normal';\n    const filename = isString(options.filename)\n        ? options.filename\n        : 'message.intl';\n    const sourceMap = !!options.sourceMap;\n    // prettier-ignore\n    const breakLineCode = options.breakLineCode != null\n        ? options.breakLineCode\n        : mode === 'arrow'\n            ? ';'\n            : '\\n';\n    const needIndent = options.needIndent ? options.needIndent : mode !== 'arrow';\n    const helpers = ast.helpers || [];\n    const generator = createCodeGenerator(ast, {\n        mode,\n        filename,\n        sourceMap,\n        breakLineCode,\n        needIndent\n    });\n    generator.push(mode === 'normal' ? `function __msg__ (ctx) {` : `(ctx) => {`);\n    generator.indent(needIndent);\n    if (helpers.length > 0) {\n        generator.push(`const { ${join(helpers.map(s => `${s}: _${s}`), ', ')} } = ctx`);\n        generator.newline();\n    }\n    generator.push(`return `);\n    generateNode(generator, ast);\n    generator.deindent(needIndent);\n    generator.push(`}`);\n    delete ast.helpers;\n    const { code, map } = generator.context();\n    return {\n        ast,\n        code,\n        map: map ? map.toJSON() : undefined // eslint-disable-line @typescript-eslint/no-explicit-any\n    };\n};\n\nfunction baseCompile(source, options = {}) {\n    const assignedOptions = assign({}, options);\n    const jit = !!assignedOptions.jit;\n    const enalbeMinify = !!assignedOptions.minify;\n    const enambeOptimize = assignedOptions.optimize == null ? true : assignedOptions.optimize;\n    // parse source codes\n    const parser = createParser(assignedOptions);\n    const ast = parser.parse(source);\n    if (!jit) {\n        // transform ASTs\n        transform(ast, assignedOptions);\n        // generate javascript codes\n        return generate(ast, assignedOptions);\n    }\n    else {\n        // optimize ASTs\n        enambeOptimize && optimize(ast);\n        // minimize ASTs\n        enalbeMinify && minify(ast);\n        // In JIT mode, no ast transform, no code generation.\n        return { ast, code: '' };\n    }\n}\n\nexport { CompileErrorCodes, CompileWarnCodes, ERROR_DOMAIN$2 as ERROR_DOMAIN, LOCATION_STUB, baseCompile, createCompileError, createCompileWarn, createLocation, createParser, createPosition, defaultOnError, detectHtmlTag, errorMessages, warnMessages };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}