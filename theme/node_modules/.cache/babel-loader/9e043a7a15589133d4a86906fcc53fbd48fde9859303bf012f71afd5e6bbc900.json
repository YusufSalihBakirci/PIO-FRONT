{"ast":null,"code":"import { toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveDynamicComponent as _resolveDynamicComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(_resolveDynamicComponent($props.tag), null, {\n    \"default\": _withCtx(function () {\n      return [_createTextVNode(_toDisplayString($options.tweenedNumber), 1 /* TEXT */)];\n    }),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["_createBlock","_resolveDynamicComponent","$props","tag","_withCtx","_createTextVNode","_toDisplayString","$options","tweenedNumber","_"],"sources":["C:\\Users\\USER\\Desktop\\PIO-Front\\theme\\node_modules\\vue-number-animation\\Number.vue"],"sourcesContent":["<template>\n  <component :is=\"tag\">\n    {{ tweenedNumber }}\n  </component>\n</template>\n\n<script>\nimport {TweenLite} from 'gsap'\n// Returns the number of full stop in given string.\nconst countFullstops = (str) => str.replace(/[^.]/g, '').length\n\nexport default {\n  name: 'number',\n  props: {\n    from: {\n      type: [Number, String],\n      default: 0\n    },\n    to: {\n      type: [Number, String],\n      required: true,\n      default: 0\n    },\n    format: {\n      type: Function,\n      default: (num) => parseInt(num)\n    },\n    duration: {\n      type: Number,\n      default: 1 // Duration of animation in seconds\n    },\n    easing: {\n      type: String,\n      default: 'Power1.easeOut'\n    },\n    delay: {\n      type: Number,\n      default: 0 // Delay the animation in seconds\n    },\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    animationPaused: Boolean // Stops animation before start\n  },\n  data() {\n    return {\n      fromProp: this.from\n    }\n  },\n  computed: {\n    tweenedNumber () {\n      return this.format(this.fromProp)\n    }\n  },\n  methods: {\n    tween (value) {\n      const vm = this\n      const tLite = TweenLite\n        .to(vm.$data, vm.duration, {\n          fromProp: value,\n          paused: vm.animationPaused,\n          ease: vm.easeCheck(),\n          onStart: () => vm.$emit('start'),\n          onComplete: () => vm.$emit('complete'),\n          onUpdate: () => vm.$emit('update'),\n          delay: vm.delay // In seconds\n        })\n      vm.tween.tLite = tLite\n    },\n    play () {\n      this.tween.tLite.play()\n    },\n    pause () {\n      this.tween.tLite.pause()\n    },\n    restart () {\n      this.tween.tLite.restart()\n    },\n    easeCheck () {\n      const vm = this\n      if (countFullstops(vm.easing) !== 1) {\n        throw new Error('Invalid ease type. (eg. easing=\"Power1.easeOut\")')\n      }\n      return vm.easing\n    }\n  },\n  watch: {\n    to (newValue) {\n      this.tween(newValue)\n    }\n  },\n  mounted() {\n    this.tween(this.to)\n  }\n}\n</script>\n\n<style>\n\n</style>\n"],"mappings":";;uBACEA,YAAA,CAEYC,wBAHd,CACkBC,MAAA,CAAAC,GAAG;IADrB,WAAAC,QAAA,CAEI;MAAA,OAAmB,CAFvBC,gBAAA,CAAAC,gBAAA,CAEOC,QAAA,CAAAC,aAAa,iB;;IAFpBC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}